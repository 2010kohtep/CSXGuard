unit HLSDK;

interface

const
  HLSDK_VERSION = 6;
  HLSDK_DEVBUILD = True;

{$A4}
{$Z4}

const
  MAX_PLAYERS = 32;
  MAXPLAYERS = 32;
  MAX_CLIENTS = 32;
  MAX_WEAPONS = 32;
  MAX_WEAPON_SLOTS = 5;
  MAX_WEAPON_NAME = 128;
  MAX_ITEM_TYPES = 6;
  MAX_ITEMS = 5;
  MAX_PHYSENTS = 600;
  MAX_EDICTS = 900;
  MAX_MOVEENTS = 64;
  MAX_CLIP_PLANES = 5;
  MAX_AMMO_TYPES = 32;
  MAX_AMMO_SLOTS = 32;
  MAX_WORLD_SOUNDS = 64;
  MAX_HUD_SPRITES = 256;
  MAX_TEMP_ENTITIES = 500;
  MAX_LIGHTSTYLES = 64;
  MAX_ARGS = 80;
  MAX_ALIAS_NAME = 32;
  MAX_PATH_SIZE = 10;
  MAXALIASVERTS = 1024;
  ALIAS_VERSION = 6;
  MAX_LBM_HEIGHT = 480;
  SPRITE_VERSION = 2;
  MAX_STYLESTRING = 64;
  BSPVERSION = 30;
  MAX_PARTICLES = 512;
  MAX_PACKET_ENTITIES = 256;
  MAX_STRINGCMD = 64;
  COM_TOKEN_MAX_LENGTH = 1024;
  COM_COPY_CHUNK_SIZE = 1024;
  MAX_TUTOR_MESSAGES = 256;

  MAX_PLAYER_NAME_LENGTH = 32;
  MAX_MOTD_LENGTH = 1536;
  MAX_SPEC_HUD_MESSAGES = 8;
  MAX_OVERVIEW_ENTITIES = 128;
  MAX_PHYSINFO_STRING = 72;
  MAX_EQUIP = 32;
  MAX_TRANSITION_ENTITY = 512;
  CBSENTENCENAME_MAX = 16;
  CVOXFILESENTENCEMAX = 1536;

  MAXSTUDIOTRIANGLES = 20000;
  MAXSTUDIOVERTS = 2048;
  MAXSTUDIOSEQUENCES = 256;
  MAXSTUDIOSKINS = 100;
  MAXSTUDIOSRCBONES = 512;
  MAXSTUDIOBONES = 128;
  MAXSTUDIOMODELS = 32;
  MAXSTUDIOBODYPARTS = 32;
  MAXSTUDIOGROUPS = 16;
  MAXSTUDIOANIMATIONS = 512;
  MAXSTUDIOMESHES = 256;
  MAXSTUDIOEVENTS = 1024;
  MAXSTUDIOPIVOTS = 256;
  MAXSTUDIOCONTROLLERS = 8;

  MAX_MAP_HULLS = 4;
  MAX_MAP_MODELS = 400;
  MAX_MAP_BRUSHES = 4096;
  MAX_MAP_ENTITIES = 1024;
  MAX_MAP_ENTSTRING = 128 * 1024;
  MAX_MAP_PLANES = 32767;
  MAX_MAP_NODES = 32767;
  MAX_MAP_CLIPNODES = 32767;
  MAX_MAP_LEAFS = 8192;
  MAX_MAP_VERTS = 65535;
  MAX_MAP_FACES = 65535;
  MAX_MAP_MARKSURFACES = 65535;
  MAX_MAP_TEXINFO = 8192;
  MAX_MAP_EDGES = 256000;
  MAX_MAP_SURFEDGES = 512000;
  MAX_MAP_TEXTURES = 512;
  MAX_MAP_MIPTEX = $200000;
  MAX_MAP_LIGHTING = $200000;
  MAX_MAP_VISIBILITY = $200000;
  MAX_MAP_PORTALS = 65536;

  MAX_KEY = 32;
  MAX_VALUE = 1024;

  MAX_DIRECTOR_CMD_PARAMETERS = 4;
  MAX_DIRECTOR_CMD_STRING = 128;

  SF_GLOBAL_SET = 1;
  
  SF_WORLD_DARK = 1 shl 0;
  SF_WORLD_TITLE = 1 shl 1;
  SF_WORLD_FORCETEAM = 1 shl 2;
  SF_BRUSH_ACCDCC = 1 shl 4;
  SF_BRUSH_HURT = 1 shl 5;
  SF_ROTATING_NOT_SOLID = 1 shl 6;
  SF_DECAL_NOTINDEATHMATCH = 1 shl 11;
  SF_NORESPAWN = 1 shl 30;
  SF_BUTTON_DONTMOVE = 1 shl 0;
  SF_ROTBUTTON_NOTSOLID = 1 shl 0;
  SF_BUTTON_TOGGLE = 1 shl 5;
  SF_BUTTON_SPARK_IF_OFF = 1 shl 6;
  SF_BUTTON_TOUCH_ONLY = 1 shl 8;
  SF_DOOR_ROTATE_Y = 0;
  SF_DOOR_START_OPEN = 1 shl 0;
  SF_DOOR_ROTATE_BACKWARDS = 1 shl 1;
  SF_DOOR_PASSABLE = 1 shl 3;
  SF_DOOR_ONEWAY = 1 shl 4;
  SF_DOOR_NO_AUTO_RETURN = 1 shl 5;
  SF_DOOR_ROTATE_Z = 1 shl 6;
  SF_DOOR_ROTATE_X = 1 shl 7;
  SF_DOOR_USE_ONLY = 1 shl 8;
  SF_DOOR_NOMONSTERS = 1 shl 9;
  SF_DOOR_SILENT = $80000000;
  SF_GIBSHOOTER_REPEATABLE = 1 shl 0;
  SF_FUNNEL_REVERSE = 1 shl 0;
  SF_BUBBLES_STARTOFF = 1 shl 0;
  SF_BLOOD_RANDOM = 1 shl 0;
  SF_BLOOD_STREAM = 1 shl 1;
  SF_BLOOD_PLAYER = 1 shl 2;
  SF_BLOOD_DECAL = 1 shl 3;
  SF_SHAKE_EVERYONE = 1 shl 0;
  SF_SHAKE_DISRUPT = 1 shl 1;
  SF_SHAKE_INAIR = 1 shl 2;
  SF_FADE_IN = 1 shl 0;
  SF_FADE_MODULATE = 1 shl 1;
  SF_FADE_ONLYONE = 1 shl 2;
  SF_BEAM_STARTON = 1 shl 0;
  SF_BEAM_TOGGLE = 1 shl 1;
  SF_BEAM_RANDOM = 1 shl 2;
  SF_BEAM_RING = 1 shl 3;
  SF_BEAM_SPARKSTART = 1 shl 4;
  SF_BEAM_SPARKEND = 1 shl 5;
  SF_BEAM_DECALS = 1 shl 6;
  SF_BEAM_SHADEIN = 1 shl 7;
  SF_BEAM_SHADEOUT = 1 shl 8;
  SF_BEAM_TEMPORARY = $8000;
  SF_SPRITE_STARTON = 1 shl 0;
  SF_SPRITE_ONCE = 1 shl 1;
  SF_SPRITE_TEMPORARY = $8000;
  SF_MESSAGE_ONCE = 1 shl 0;
  SF_MESSAGE_ALL = 1 shl 1;
  SF_ENVEXPLOSION_NODAMAGE = 1 shl 0;
  SF_ENVEXPLOSION_REPEATABLE = 1 shl 1;
  SF_ENVEXPLOSION_NOFIREBALL = 1 shl 2;
  SF_ENVEXPLOSION_NOSMOKE = 1 shl 3;
  SF_ENVEXPLOSION_NODECAL = 1 shl 4;
  SF_ENVEXPLOSION_NOSPARKS = 1 shl 5;
  SF_TANK_ACTIVE = 1 shl 0;
  SF_TANK_PLAYER = 1 shl 1;
  SF_TANK_HUMANS = 1 shl 2;
  SF_TANK_ALIENS = 1 shl 3;
  SF_TANK_LINEOFSIGHT = 1 shl 4;
  SF_TANK_CANCONTROL = 1 shl 5;
  SF_TANK_SOUNDON = $8000;
  SF_ITEM_USE_ONLY = 1 shl 8;
  SF_DETONATE = 1 shl 0;
  SF_SCORE_NEGATIVE = 1 shl 0;
  SF_SCORE_TEAM = 1 shl 1;
  SF_ENVTEXT_ALLPLAYERS = 1 shl 0;
  SF_TEAMMASTER_FIREONCE = 1 shl 0;
  SF_TEAMMASTER_ANYTEAM = 1 shl 1;
  SF_TEAMSET_FIREONCE = 1 shl 0;
  SF_TEAMSET_CLEARTEAM = 1 shl 1;
  SF_PKILL_FIREONCE = 1 shl 0;
  SF_GAMECOUNT_FIREONCE = 1 shl 0;
  SF_GAMECOUNT_RESET = 1 shl 1;
  SF_GAMECOUNTSET_FIREONCE = 1 shl 0;
  SF_PLAYEREQUIP_USEONLY = 1 shl 0;
  SF_PTEAM_FIREONCE = 1 shl 0;
  SF_PTEAM_KILL = 1 shl 1;
  SF_PTEAM_GIB = 1 shl 2;
  SF_TRACK_ACTIVATETRAIN = 1 shl 0;
  SF_TRACK_RELINK = 1 shl 1;
  SF_TRACK_ROTMOVE = 1 shl 2;
  SF_TRACK_STARTBOTTOM = 1 shl 3;
  SF_TRACK_DONT_MOVE = 1 shl 4;
  SF_PLAT_TOGGLE = 1 shl 0;
  SF_TRACKTRAIN_NOPITCH = 1 shl 0;
  SF_TRACKTRAIN_NOCONTROL = 1 shl 1;
  SF_TRACKTRAIN_FORWARDONLY = 1 shl 2;
  SF_TRACKTRAIN_PASSABLE = 1 shl 3;
  SF_PATH_DISABLED = 1 shl 0;
  SF_PATH_FIREONCE = 1 shl 1;
  SF_PATH_ALTREVERSE = 1 shl 2;
  SF_PATH_DISABLE_TRAIN = 1 shl 3;
  SF_PATH_ALTERNATE = $8000;
  SF_CORNER_WAITFORTRIG = 1 shl 0;
  SF_CORNER_TELEPORT = 1 shl 1;
  SF_CORNER_FIREONCE = 1 shl 2;
  SF_TRIGGER_PUSH_START_OFF = 1 shl 1;
  SF_TRIGGER_HURT_TARGETONCE = 1 shl 0;
  SF_TRIGGER_HURT_START_OFF = 1 shl 1;
  SF_TRIGGER_HURT_NO_CLIENTS = 1 shl 3;
  SF_TRIGGER_HURT_CLIENTONLYFIRE = 1 shl 4;
  SF_TRIGGER_HURT_CLIENTONLYTOUCH = 1 shl 5;
  SF_AUTO_FIREONCE = 1 shl 0;
  SF_RELAY_FIREONCE = 1 shl 0;
  SF_MULTIMANAGER_CLONE = $80000000;
  SF_MULTIMANAGER_THREAD = 1 shl 0;
  SF_RENDER_MASKFX = 1 shl 0;
  SF_RENDER_MASKAMT = 1 shl 1;
  SF_RENDER_MASKMODE = 1 shl 2;
  SF_RENDER_MASKCOLOR = 1 shl 3;
  SF_CHANGELEVEL_USEONLY = 1 shl 1;
  SF_ENDSECTION_USEONLY = 1 shl 0;
  SF_CAMERA_PLAYER_POSITION = 1 shl 0;
  SF_CAMERA_PLAYER_TARGET = 1 shl 1;
  SF_CAMERA_PLAYER_TAKECONTROL = 1 shl 2;
  SF_BRUSH_ROTATE_Y_AXIS = 0;
  SF_BRUSH_ROTATE_INSTANT = 1 shl 0;
  SF_BRUSH_ROTATE_BACKWARDS = 1 shl 1;
  SF_BRUSH_ROTATE_Z_AXIS = 1 shl 2;
  SF_BRUSH_ROTATE_X_AXIS = 1 shl 3;
  SF_PENDULUM_AUTO_RETURN =  1 shl 4;
  SF_PENDULUM_PASSABLE = 1 shl 5;
  SF_BRUSH_ROTATE_SMALLRADIUS = 1 shl 7;
  SF_BRUSH_ROTATE_MEDIUMRADIUS = 1 shl 8;
  SF_BRUSH_ROTATE_LARGERADIUS = 1 shl 9;
  SF_TRIGGER_ALLOWMONSTERS = 1 shl 0;
  SF_TRIGGER_NOCLIENTS = 1 shl 1;
  SF_TRIGGER_PUSHABLES = 1 shl 2;
  SF_BREAK_TRIGGER_ONLY = 1 shl 0;
  SF_BREAK_TOUCH = 1 shl 1;
  SF_BREAK_PRESSURE = 1 shl 2;
  SF_BREAK_CROWBAR = 1 shl 8;
  SF_PUSH_BREAKABLE = 1 shl 7;
  SF_LIGHT_START_OFF = 1 shl 0;
  SF_TRIG_PUSH_ONCE = 1 shl 0;
  SF_TRAIN_WAIT_RETRIGGER = 1 shl 0;
  SF_TRAIN_START_ON = 1 shl 2;
  SF_TRAIN_PASSABLE = 1 shl 3;

  ENTITY_NORMAL = 1 shl 0;
  ENTITY_BEAM = 1 shl 1;

  HIDEHUD_WEAPONS = 1 shl 0;
  HIDEHUD_FLASHLIGHT = 1 shl 1;
  HIDEHUD_ALL = 1 shl 2;
  HIDEHUD_HEALTH = 1 shl 3;

  HUD_PRINTNOTIFY = 1;
  HUD_PRINTCONSOLE = 2;
  HUD_PRINTTALK = 3;
  HUD_PRINTCENTER = 4;

  WEAPON_SUIT = 31;

  FL_FLY = 1 shl 0;
  FL_SWIM = 1 shl 1;
  FL_CONVEYOR = 1 shl 2;
  FL_CLIENT = 1 shl 3;
  FL_INWATER = 1 shl 4;
  FL_MONSTER = 1 shl 5;
  FL_NOTARGET = 1 shl 7;
  FL_SKIPLOCALHOST = 1 shl 8;
  FL_ONGROUND = 1 shl 9;
  FL_PARTIALGROUND = 1 shl 10;
  FL_WATERJUMP = 1 shl 11;
  FL_FROZEN = 1 shl 12;
  FL_FAKECLIENT = 1 shl 13;
  FL_DUCKING = 1 shl 14;
  FL_FLOAT = 1 shl 15;
  FL_GRAPHED = 1 shl 16;
  FL_IMMUNE_WATER = 1 shl 17;
  FL_IMMUNE_SLIME = 1 shl 18;
  FL_IMMUNE_LAVA = 1 shl 19;
  FL_PROXY = 1 shl 20;
  FL_ALWAYSTHINK = 1 shl 21;
  FL_BASEVELOCITY = 1 shl 22;
  FL_MONSTERCLIP = 1 shl 23;
  FL_ONTRAIN = 1 shl 24;
  FL_WORLDBRUSH = 1 shl 25;
  FL_SPECTATOR = 1 shl 26;
  FL_CUSTOMENTITY = 1 shl 29;
  FL_KILLME = 1 shl 30;
  FL_DORMANT = 1 shl 31;
                                                                                        
  FTRACE_SIMPLEBOX = 1 shl 0;

  WALKMOVE_NORMAL = 0;
  WALKMOVE_WORLDONLY = 1;
  WALKMOVE_CHECKONLY = 2;

  SVC_BAD = 0;
  SVC_NOP = 1;
  SVC_DISCONNECT = 2;
  SVC_EVENT = 3;
  SVC_VERSION = 4;
  SVC_SETVIEW = 5;
  SVC_SOUND = 6;
  SVC_TIME = 7;
  SVC_PRINT = 8;
  SVC_STUFFTEXT = 9;
  SVC_SETANGLE = 10;
  SVC_SERVERINFO = 11;
  SVC_LIGHTSTYLE = 12;
  SVC_UPDATEUSERINFO = 13;
  SVC_DELTADESCRIPTION = 14;
  SVC_CLIENTDATA = 15;
  SVC_STOPSOUND = 16;
  SVC_PINGS = 17;
  SVC_PARTICLE = 18;
  SVC_DAMAGE = 19;
  SVC_SPAWNSTATIC = 20;
  SVC_EVENT_RELIABLE = 21;
  SVC_SPAWNBASELINE = 22;
  SVC_TEMPENTITY = 23;
  SVC_SETPAUSE = 24;
  SVC_SIGNONNUM = 25;
  SVC_CENTERPRINT = 26;
  SVC_KILLEDMONSTER = 27;
  SVC_FOUNDSECRET = 28;
  SVC_SPAWNSTATICSOUND = 29;
  SVC_INTERMISSION = 30;
  SVC_FINALE = 31;
  SVC_CDTRACK = 32;
  SVC_RESTORE = 33;
  SVC_CUTSCENE = 34;
  SVC_WEAPONANIM = 35;
  SVC_DECALNAME = 36;
  SVC_ROOMTYPE = 37;
  SVC_ADDANGLE = 38;
  SVC_NEWUSERMSG = 39;
  SVC_PACKETENTITIES = 40;
  SVC_DELTAPACKETENTITIES = 41;
  SVC_CHOKE = 42;
  SVC_RESOURCELIST = 43;
  SVC_NEWMOVEVARS = 44;
  SVC_RESOURCEREQUEST = 45;
  SVC_CUSTOMIZATION = 46;
  SVC_CROSSHAIRANGLE = 47;
  SVC_SOUNDFADE = 48;
  SVC_FILETXFERFAILED = 49;
  SVC_HLTV = 50;
  SVC_DIRECTOR = 51;
  SVC_VOICEINIT = 52;
  SVC_VOICEDATA = 53;
  SVC_SENDEXTRAINFO = 54;
  SVC_TIMESCALE = 55;
  SVC_RESOURCELOCATION = 56;
  SVC_SENDCVARVALUE = 57;
  SVC_SENDCVARVALUE2 = 58;

  MOVETYPE_NONE = 0;
  MOVETYPE_WALK = 3;
  MOVETYPE_STEP = 4;
  MOVETYPE_FLY = 5;
  MOVETYPE_TOSS = 6;
  MOVETYPE_PUSH = 7;
  MOVETYPE_NOCLIP = 8;
  MOVETYPE_FLYMISSILE = 9;
  MOVETYPE_BOUNCE = 10;
  MOVETYPE_BOUNCEMISSILE = 11;
  MOVETYPE_FOLLOW = 12;
  MOVETYPE_PUSHSTEP = 13;

  SOLID_NOT = 0;
  SOLID_TRIGGER = 1;
  SOLID_BBOX = 2;
  SOLID_SLIDEBOX = 3;
  SOLID_BSP = 4;

  DEAD_NO = 0;
  DEAD_DYING = 1;
  DEAD_DEAD = 2;
  DEAD_RESPAWNABLE = 3;
  DEAD_DISCARDBODY = 4;

  DAMAGE_NO = 0;
  DAMAGE_YES = 1;
  DAMAGE_AIM = 2;

  EF_BRIGHTFIELD = 1 shl 0;
  EF_MUZZLEFLASH = 1 shl 1;
  EF_BRIGHTLIGHT = 1 shl 2;
  EF_DIMLIGHT = 1 shl 3;
  EF_INVLIGHT = 1 shl 4;
  EF_NOINTERP = 1 shl 5;
  EF_LIGHT = 1 shl 6;
  EF_NODRAW = 1 shl 7;

  EFLAG_SLERP = 1;

  TE_EXPLFLAG_NONE = 0;
  TE_EXPLFLAG_NOADDITIVE = 1 shl 0;
  TE_EXPLFLAG_NODLIGHTS = 1 shl 1;
  TE_EXPLFLAG_NOSOUND = 1 shl 2;
  TE_EXPLFLAG_NOPARTICLES = 1 shl 3;

  TEFIRE_FLAG_ALLFLOAT = 1 shl 0;
  TEFIRE_FLAG_SOMEFLOAT = 1 shl 1;
  TEFIRE_FLAG_LOOP = 1 shl 2;
  TEFIRE_FLAG_ALPHA = 1 shl 3;
  TEFIRE_FLAG_PLANAR = 1 shl 4;
    
  TE_BEAMPOINTS = 0;
  TE_BEAMENTPOINT = 1;
  TE_GUNSHOT = 2;
  TE_EXPLOSION = 3;
  TE_TAREXPLOSION = 4;
  TE_SMOKE = 5;
  TE_TRACER = 6;
  TE_LIGHTNING = 7;
  TE_BEAMENTS = 8;
  TE_SPARKS = 9;
  TE_LAVASPLASH = 10;
  TE_TELEPORT = 11;
  TE_EXPLOSION2 = 12;
  TE_BSPDECAL = 13;
  TE_IMPLOSION = 14;
  TE_SPRITETRAIL = 15;
  TE_BEAM = 16;
  TE_SPRITE = 17;
  TE_BEAMSPRITE = 18;
  TE_BEAMTORUS = 19;
  TE_BEAMDISK = 20;
  TE_BEAMCYLINDER = 21;
  TE_BEAMFOLLOW = 22;
  TE_GLOWSPRITE = 23;
  TE_BEAMRING = 24;
  TE_STREAK_SPLASH = 25;
  TE_BEAMHOSE = 26;
  TE_DLIGHT = 27;
  TE_ELIGHT = 28;
  TE_TEXTMESSAGE = 29;
  TE_LINE = 30;
  TE_BOX = 31;
  TE_KILLBEAM = 99;
  TE_LARGEFUNNEL = 100;
  TE_BLOODSTREAM = 101;
  TE_SHOWLINE = 102;
  TE_BLOOD = 103;
  TE_DECAL = 104;
  TE_FIZZ = 105;
  TE_MODEL = 106;
  TE_EXPLODEMODEL = 107;
  TE_BREAKMODEL = 108;
  TE_GUNSHOTDECAL = 109;
  TE_SPRITE_SPRAY = 110;
  TE_ARMOR_RICOCHET = 111;
  TE_PLAYERDECAL = 112;
  TE_BUBBLES = 113;
  TE_BUBBLETRAIL = 114;
  TE_BLOODSPRITE = 115;
  TE_WORLDDECAL = 116;
  TE_WORLDDECALHIGH = 117;
  TE_DECALHIGH = 118;
  TE_PROJECTILE = 119;
  TE_SPRAY = 120;
  TE_PLAYERSPRITES = 121;
  TE_PARTICLEBURST = 122;
  TE_FIREFIELD = 123;
  TE_PLAYERATTACHMENT = 124;
  TE_KILLPLAYERATTACHMENTS = 125;
  TE_MULTIGUNSHOT = 126;
  TE_USERTRACER = 127;

  MSG_BROADCAST = 0;
  MSG_ONE = 1;
  MSG_ALL = 2;
  MSG_INIT = 3;                                                                       
  MSG_PVS = 4;
  MSG_PAS = 5;
  MSG_PVS_R = 6;
  MSG_PAS_R = 7;
  MSG_ONE_UNRELIABLE = 8;
  MSG_SPEC = 9;

  CONTENTS_EMPTY = -1;
  CONTENTS_SOLID = -2;
  CONTENTS_WATER = -3;
  CONTENTS_SLIME = -4;
  CONTENTS_LAVA = -5;
  CONTENTS_SKY = -6;
  CONTENTS_ORIGIN = -7;
  CONTENTS_CLIP = -8;
  CONTENTS_CURRENT_0 = -9;
  CONTENTS_CURRENT_90 = -10;
  CONTENTS_CURRENT_180 = -11;
  CONTENTS_CURRENT_270 = -12;
  CONTENTS_CURRENT_UP = -13;
  CONTENTS_CURRENT_DOWN = -14;
  CONTENTS_TRANSLUCENT = -15;
  CONTENTS_LADDER = -16;

  CONTENT_EMPTY = -1;
  CONTENT_SOLID = -2;
  CONTENT_WATER = -3;
  CONTENT_SLIME = -4;
  CONTENT_LAVA = -5;
  CONTENT_SKY = -6;
  CONTENT_FLYFIELD = -17;
  CONTENT_GRAVITY_FLYFIELD = -18;
  CONTENT_FOG = -19;

  CHAN_AUTO = 0;
  CHAN_WEAPON = 1;
  CHAN_VOICE = 2;
  CHAN_ITEM = 3;
  CHAN_BODY = 4;
  CHAN_STREAM = 5;
  CHAN_STATIC = 6;
  CHAN_NETWORKVOICE_BASE = 7;
  CHAN_NETWORKVOICE_END = 500;
  
  ATTN_NONE = 0;
  ATTN_NORM = 0.8;
  ATTN_IDLE = 2;
  ATTN_STATIC = 1.25;
  
  PITCH_NORM = 100;
  PITCH_LOW = 95;
  PITCH_HIGH = 120;
  
  VOL_NORM = 1;

  PLAT_LOW_TRIGGER = 1;

  BREAK_TYPEMASK = $4F;
  BREAK_GLASS = 1 shl 0;
  BREAK_METAL = 1 shl 1;
  BREAK_FLESH = 1 shl 2;
  BREAK_WOOD = 1 shl 3;
  BREAK_SMOKE = 1 shl 4;
  BREAK_TRANS = 1 shl 5;
  BREAK_CONCRETE = 1 shl 6;
  BREAK_2 = 1 shl 7;
  
  BOUNCE_GLASS = BREAK_GLASS;
  BOUNCE_METAL = BREAK_METAL;
  BOUNCE_FLESH = BREAK_FLESH;
  BOUNCE_WOOD = BREAK_WOOD;
  BOUNCE_SHRAP = 1 shl 4;
  BOUNCE_SHELL = 1 shl 5;
  BOUNCE_CONCRETE = BREAK_CONCRETE;
  BOUNCE_SHOTSHELL = 1 shl 7;

  TE_BOUNCE_NULL = 0;
  TE_BOUNCE_SHELL = 1;
  TE_BOUNCE_SHOTSHELL = 2;
  
  kRenderNormal = 0;
  kRenderTransColor = 1;
  kRenderTransTexture = 2;
  kRenderGlow = 3;
  kRenderTransAlpha = 4;
  kRenderTransAdd = 5;
  
  kRenderFxNone = 0;
  kRenderFxPulseSlow = 1;
  kRenderFxPulseFast = 2;
  kRenderFxPulseSlowWide = 3;
  kRenderFxPulseFastWide = 4;
  kRenderFxFadeSlow = 5;
  kRenderFxFadeFast = 6;
  kRenderFxSolidSlow = 7;
  kRenderFxSolidFast = 8;
  kRenderFxStrobeSlow = 9;
  kRenderFxStrobeFast = 10;
  kRenderFxStrobeFaster = 11;
  kRenderFxFlickerSlow = 12;
  kRenderFxFlickerFast = 13;
  kRenderFxNoDissipation = 14;
  kRenderFxDistort = 15;
  kRenderFxHologram = 16;
  kRenderFxDeadPlayer = 17;
  kRenderFxExplode = 18;
  kRenderFxGlowShell = 19;
  kRenderFxClampMinScale = 20;

  K_TAB = 9;
  K_ENTER = 13;
  K_ESCAPE = 27;
  K_SPACE = 32;
  K_BACKSPACE = 127;
  K_UPARROW = 128;
  K_DOWNARROW = 129;
  K_LEFTARROW = 130;
  K_RIGHTARROW = 131;
  K_ALT = 132;
  K_CTRL = 133;
  K_SHIFT = 134;
  K_F1 = 135;
  K_F2 = 136;
  K_F3 = 137;
  K_F4 = 138;
  K_F5 = 139;
  K_F6 = 140;
  K_F7 = 141;
  K_F8 = 142;
  K_F9 = 143;
  K_F10 = 144;
  K_F11 = 145;
  K_F12 = 146;
  K_INS = 147;
  K_DEL = 148;
  K_PGDN = 149;
  K_PGUP = 150;
  K_HOME = 151;
  K_END = 152;
  K_KP_HOME = 160;
  K_KP_UPARROW = 161;
  K_KP_PGUP = 162;
  K_KP_LEFTARROW = 163;
  K_KP_5 = 164;
  K_KP_RIGHTARROW = 165;
  K_KP_END = 166;
  K_KP_DOWNARROW = 167;
  K_KP_PGDN = 168;
  K_KP_ENTER = 169;
  K_KP_INS = 170;
  K_KP_DEL = 171;
  K_KP_SLASH = 172;
  K_KP_MINUS = 173;
  K_KP_PLUS = 174;
  K_CAPSLOCK = 175;
  K_JOY1 = 203;
  K_JOY2 = 204;
  K_JOY3 = 205;
  K_JOY4 = 206;
  K_AUX1 = 207;
  K_AUX2 = 208;
  K_AUX3 = 209;
  K_AUX4 = 210;
  K_AUX5 = 211;
  K_AUX6 = 212;
  K_AUX7 = 213;
  K_AUX8 = 214;
  K_AUX9 = 215;
  K_AUX10 = 216;
  K_AUX11 = 217;
  K_AUX12 = 218;
  K_AUX13 = 219;
  K_AUX14 = 220;
  K_AUX15 = 221;
  K_AUX16 = 222;
  K_AUX17 = 223;
  K_AUX18 = 224;
  K_AUX19 = 225;
  K_AUX20 = 226;
  K_AUX21 = 227;
  K_AUX22 = 228;
  K_AUX23 = 229;
  K_AUX24 = 230;
  K_AUX25 = 231;
  K_AUX26 = 232;
  K_AUX27 = 233;
  K_AUX28 = 234;
  K_AUX29 = 235;
  K_AUX30 = 236;
  K_AUX31 = 237;
  K_AUX32 = 238;
  K_MWHEELDOWN = 239;
  K_MWHEELUP = 240;
  K_MOUSE1 = 241;
  K_MOUSE2 = 242;
  K_MOUSE3 = 243;
  K_MOUSE4 = 244;
  K_MOUSE5 = 245;
  K_PAUSE = 255;

  STUDIO_RENDER = 1;
  STUDIO_EVENTS = 2;

  MAX_MODEL_NAME = 64;
  MIPLEVELS = 4;
  NUM_AMBIENTS = 4;
  MAXLIGHTMAPS = 4;

  PLANE_ANYZ = 5;
  ALIAS_Z_CLIP_PLANE = 5;
  ALIAS_XY_CLIP_MASK = 15;
  ZISCALE = 1 shl 15;
  CACHE_SIZE = 32;
  
  M_PI = 3.14159265358979323846;

  ALIAS_LEFT_CLIP = 1 shl 0;
  ALIAS_TOP_CLIP = 1 shl 1;
  ALIAS_RIGHT_CLIP = 1 shl 2;
  ALIAS_BOTTOM_CLIP = 1 shl 3;
  ALIAS_Z_CLIP = 1 shl 4;
  ALIAS_ONSEAM = 1 shl 5;

  MAX_INFO_STRING = 256;
  MAX_SCOREBOARDNAME = 32;
  MAX_QPATH = 64;

  RES_FATALIFMISSING = 1 shl 0;
  RES_WASMISSING = 1 shl 1;
  RES_CUSTOM = 1 shl 2;
  RES_REQUESTED = 1 shl 3;
  RES_PRECACHED = 1 shl 4;
  
  FCUST_FROMHPAK = 1 shl 0;
  FCUST_WIPEDATA = 1 shl 1;
  FCUST_IGNOREINIT = 1 shl 2;

  MAX_ENT_LEAFS = 48;
  
  FCVAR_ARCHIVE = 1 shl 0;
  FCVAR_USERINFO = 1 shl 1;
  FCVAR_SERVER = 1 shl 2;
  FCVAR_EXTDLL = 1 shl 3;
  FCVAR_CLIENTDLL = 1 shl 4;
  FCVAR_PROTECTED = 1 shl 5;
  FCVAR_SPONLY = 1 shl 6;
  FCVAR_PRINTABLEONLY = 1 shl 7;
  FCVAR_UNLOGGED = 1 shl 8;

  MAX_LEVEL_CONNECTIONS = 16;

  FENTTABLE_PLAYER = $80000000;
  FENTTABLE_REMOVED = $40000000;
  FENTTABLE_MOVEABLE = $20000000;
  FENTTABLE_GLOBAL = $10000000;

  FTYPEDESC_GLOBAL = 1;

  FEV_NOTHOST = 1 shl 0;
  FEV_RELIABLE = 1 shl 1;
  FEV_GLOBAL = 1 shl 2;
  FEV_UPDATE = 1 shl 3;
  FEV_HOSTONLY = 1 shl 4;
  FEV_SERVER = 1 shl 5;
  FEV_CLIENT = 1 shl 6;

  IN_ATTACK = 1 shl 0;
  IN_JUMP = 1 shl 1;
  IN_DUCK = 1 shl 2;
  IN_FORWARD = 1 shl 3;
  IN_BACK = 1 shl 4;
  IN_USE = 1 shl 5;
  IN_CANCEL = 1 shl 6;
  IN_LEFT = 1 shl 7;
  IN_RIGHT = 1 shl 8;
  IN_MOVELEFT = 1 shl 9;
  IN_MOVERIGHT = 1 shl 10;
  IN_ATTACK2 = 1 shl 11;
  IN_RUN = 1 shl 12;
  IN_RELOAD = 1 shl 13;
  IN_ALT1 = 1 shl 14;
  IN_SCORE = 1 shl 15;

  EVENT_SPECIFIC = 0;
  EVENT_SCRIPTED = 1000;
  EVENT_SHARED = 2000;
  EVENT_CLIENT = 5000;

  MONSTER_EVENT_BODYDROP_LIGHT = 2001;
  MONSTER_EVENT_BODYDROP_HEAVY = 2002;
  MONSTER_EVENT_SWISHSOUND = 2010;

  CTEXTURESMAX = 512;
  CBTEXTURENAMEMAX = 13;
  CHAR_TEX_CONCRETE = 'C';
  CHAR_TEX_METAL = 'M';
  CHAR_TEX_DIRT = 'D';
  CHAR_TEX_VENT = 'V';
  CHAR_TEX_GRATE = 'G';
  CHAR_TEX_TILE = 'T';
  CHAR_TEX_SLOSH = 'S';
  CHAR_TEX_WOOD = 'W';
  CHAR_TEX_COMPUTER = 'P';
  CHAR_TEX_GLASS = 'Y';
  CHAR_TEX_FLESH = 'F';

  STEP_CONCRETE = 0;
  STEP_METAL = 1;
  STEP_DIRT = 2;
  STEP_VENT = 3;
  STEP_GRATE = 4;
  STEP_TILE = 5;
  STEP_SLOSH = 6;
  STEP_WADE = 7;
  STEP_LADDER = 8;

  PITCH = 0;
  YAW = 1;
  ROLL = 2;

  bits_COND_SEE_HATE = 1 shl 1;
  bits_COND_SEE_FEAR = 1 shl 2;
  bits_COND_SEE_DISLIKE = 1 shl 3;
  bits_COND_SEE_ENEMY = 1 shl 4;
  bits_COND_LIGHT_DAMAGE = 1 shl 8;
  bits_COND_HEAVY_DAMAGE = 1 shl 9;
  bits_COND_SEE_CLIENT = 1 shl 21;
  bits_COND_SEE_NEMESIS = 1 shl 22;
  
  NETAPI_REQUEST_SERVERLIST = 0;
  NETAPI_REQUEST_PING = 1;
  NETAPI_REQUEST_RULES = 2;
  NETAPI_REQUEST_PLAYERS = 3;
  NETAPI_REQUEST_DETAILS = 4;

  FNETAPI_MULTIPLE_RESPONSE = 1 shl 0;
  
  NET_SUCCESS = 0;
  NET_ERROR_TIMEOUT = 1 shl 0;
  NET_ERROR_PROTO_UNSUPPORTED = 1 shl 1;
  NET_ERROR_UNDEFINED = 1 shl 2;

  MAX_EVENT_QUEUE = 64;

  DEFAULT_EVENT_RESENDS = 1;

  FFADE_IN = $0;
  FFADE_OUT = $1;
  FFADE_MODULATE = $2;
  FFADE_STAYOUT = $4;

  SCRINFO_SCREENFLASH = 1;
  SCRINFO_STRETCHED = 2;

  PM_NORMAL = 0;
  PM_STUDIO_IGNORE = 1 shl 0;
  PM_STUDIO_BOX = 1 shl 1;
  PM_GLASS_IGNORE = 1 shl 2;
  PM_WORLD_ONLY = 1 shl 3;

  PM_TRACELINE_PHYSENTSONLY = 0;
  PM_TRACELINE_ANYVISIBLE = 1;

  FBEAM_STARTENTITY = 1 shl 0;
  FBEAM_ENDENTITY = 1 shl 1;
  FBEAM_FADEIN = 1 shl 2;
  FBEAM_FADEOUT = 1 shl 3;
  FBEAM_SINENOISE = 1 shl 4;
  FBEAM_SOLID = 1 shl 5;
  FBEAM_SHADEIN = 1 shl 6;
  FBEAM_SHADEOUT = 1 shl 7;

  FBEAM_STARTVISIBLE = $10000000;
  FBEAM_ENDVISIBLE = $20000000;
  FBEAM_ISACTIVE = $40000000;
  FBEAM_FOREVER = $80000000;

  FEVENT_ORIGIN = 1 shl 0;
  FEVENT_ANGLES = 1 shl 1;

  DEFAULT_VIEWHEIGHT = 28;
  VEC_DUCK_VIEW = 12;

  DMG_GENERIC = 0;
  DMG_CRUSH = 1 shl 0;
  DMG_BULLET = 1 shl 1;
  DMG_SLASH = 1 shl 2;
  DMG_BURN = 1 shl 3;
  DMG_FREEZE = 1 shl 4;
  DMG_FALL = 1 shl 5;
  DMG_BLAST = 1 shl 6;
  DMG_CLUB = 1 shl 7;
  DMG_SHOCK = 1 shl 8;
  DMG_SONIC = 1 shl 9;
  DMG_ENERGYBEAM = 1 shl 10;
  DMG_NEVERGIB = 1 shl 12;
  DMG_ALWAYSGIB = 1 shl 13;
  DMG_DROWN = 1 shl 14;
  DMG_PARALYZE = 1 shl 15;
  DMG_NERVEGAS = 1 shl 16;
  DMG_POISON = 1 shl 17;
  DMG_RADIATION = 1 shl 18;
  DMG_DROWNRECOVER = 1 shl 19;
  DMG_ACID = 1 shl 20;
  DMG_SLOWBURN = 1 shl 21;
  DMG_SLOWFREEZE = 1 shl 22;
  DMG_MORTAR = 1 shl 23;

  DMG_TIMEBASED = $FFC000;
  DMG_FIRSTTIMEBASED = DMG_DROWN;

  HISTORY_MAX = 64;
  HISTORY_MASK = HISTORY_MAX - 1;
  HISTORY_DRAW_TIME = 5;

  DRC_ACTIVE = 0;
  DRC_STATUS = 1;
  DRC_CAMERA = 2;
  DRC_EVENT = 3;

  DRCAPI_NOP = 0;
  DRCAPI_ACTIVE = 1;
  DRCAPI_STATUS = 2;
  DRCAPI_SETCAM = 3;
  DRCAPI_GETCAM = 4;
  DRCAPI_DIRPLAY = 5;
  DRCAPI_DIRFREEZE = 6;
  DRCAPI_SETVIEWMODE = 7;
  DRCAPI_SETOVERVIEWPARAMS = 8;
  DRCAPI_SETFOCUS = 9;
  DRCAPI_GETTARGETS = 10;
  DRCAPI_SETVIEWPOINTS = 11;

  DLL_INACTIVE = 0;
  DLL_ACTIVE = 1;
  DLL_PAUSED = 2;
  DLL_CLOSE = 3;
  DLL_TRANS = 4;

  DLL_NORMAL = 0;
  DLL_QUIT = 4;
  DLL_RESTART = 6;

  ENG_NORMAL = 1 shl 0;

  RENDERTYPE_UNDEFINED = 0;
  RENDERTYPE_SOFTWARE = 1;
  RENDERTYPE_HARDWARE = 2;

  CLDLL_INTERFACE_VERSION = 7;
  ENGINE_INTERFACE_VERSION = 138;
  INTERFACE_VERSION = 140;
  NEW_DLL_FUNCTIONS_VERSION = 1;
  ENGINE_LAUNCHER_API_VERSION = 1;
  EVENT_API_VERSION = 1;
  STUDIO_INTERFACE_VERSION = 1;
  SV_BLENDING_INTERFACE_VERSION = 1;
  TRI_API_VERSION = 1;

  ET_NORMAL = 0;
  ET_PLAYER = 1;
  ET_TEMPENTITY = 2;
  ET_BEAM = 3;
  ET_FRAGMENTED = 4;

  TYPE_CLIENT = 0;
  TYPE_PROXY = 1;
  TYPE_COMMENTATOR = 3;
  TYPE_DEMO = 4;

  HLTV_ACTIVE = 0;
  HLTV_STATUS = 1;
  HLTV_LISTEN = 2;

  DRC_CMD_NONE = 0;
  DRC_CMD_START = 1;
  DRC_CMD_EVENT = 2;
  DRC_CMD_MODE = 3;
  DRC_CMD_CAMERA = 4;
  DRC_CMD_TIMESCALE = 5;
  DRC_CMD_MESSAGE = 6;
  DRC_CMD_SOUND = 7;
  DRC_CMD_STATUS = 8;
  DRC_CMD_BANNER = 9;
  DRC_CMD_FADE = 10;
  DRC_CMD_SHAKE = 11;
  DRC_CMD_STUFFTEXT = 12;

  DRC_CMD_LAST = 12;

  DRC_FLAG_PRIO_MASK = $F;

  DRC_FLAG_SIDE = 1 shl 4;
  DRC_FLAG_DRAMATIC = 1 shl 5;
  DRC_FLAG_SLOWMOTION = 1 shl 6;
  DRC_FLAG_FACEPLAYER = 1 shl 7;
  DRC_FLAG_INTRO = 1 shl 8;
  DRC_FLAG_FINAL = 1 shl 9;
  DRC_FLAG_NO_RANDOM = 1 shl 10;

  NUM_GLYPHS = 256;

  TENTPRIORITY_LOW = 0;
  TENTPRIORITY_HIGH = 1;

  FTENT_NONE = 0;
  FTENT_SINEWAVE = 1 shl 0;
  FTENT_GRAVITY = 1 shl 1;
  FTENT_ROTATE = 1 shl 2;
  FTENT_SLOWGRAVITY = 1 shl 3;
  FTENT_SMOKETRAIL = 1 shl 4;
  FTENT_COLLIDEWORLD = 1 shl 5;
  FTENT_FLICKER = 1 shl 6;
  FTENT_FADEOUT = 1 shl 7;
  FTENT_SPRANIMATE = 1 shl 8;
  FTENT_HITSOUND = 1 shl 9;
  FTENT_SPIRAL = 1 shl 10;
  FTENT_SPRCYCLE = 1 shl 11;
  FTENT_COLLIDEALL = 1 shl 12;
  FTENT_PERSIST = 1 shl 13;
  FTENT_COLLIDEKILL = 1 shl 14;
  FTENT_PLYRATTACHMENT = 1 shl 15;
  FTENT_SPRANIMATELOOP = 1 shl 16;
  FTENT_SPARKSHOWER = 1 shl 17;
  FTENT_NOMODEL = 1 shl 18;
  FTENT_CLIENTCUSTOM = 1 shl 19;

  TRI_TRIANGLES = 0;
  TRI_TRIANGLE_FAN = 1;
  TRI_QUADS = 2;
  TRI_POLYGON = 3;
  TRI_LINES = 4;
  TRI_TRIANGLE_STRIP = 5;
  TRI_QUAD_STRIP = 6;

  CCOM_WRITE_TEXT = 2;
  CCOM_GET_TEXT = 3;
  CCOM_GET_SCR_LINES = 4;
  CCOM_SET_SCR_LINES = 5;

  DMG_IMAGE_LIFE = 2;

  DMG_IMAGE_POISON = 0;
  DMG_IMAGE_ACID = 1;
  DMG_IMAGE_COLD = 2;
  DMG_IMAGE_DROWN = 3;
  DMG_IMAGE_BURN = 4;
  DMG_IMAGE_NERVE = 5;
  DMG_IMAGE_RAD = 6;
  DMG_IMAGE_SHOCK = 7;

  DHN_DRAWZERO = 1;
  DHN_2DIGITS = 2;
  DHN_3DIGITS = 4;

  MIN_ALPHA = 100;

  HUDELEM_ACTIVE = 1;

  HUD_ACTIVE = 1;
  HUD_INTERMISSION = 2;

  INSET_OFF = 0;
  INSET_CHASE_FREE = 1;
  INSET_IN_EYE = 2;
  INSET_MAP_FREE = 3;
  INSET_MAP_CHASE = 4;

  OVERVIEW_TILE_SIZE = 128;
  OVERVIEW_MAX_LAYERS = 1;

  CAM_DIST_DELTA = 1;
  CAM_ANGLE_DELTA = 2.5;
  CAM_ANGLE_SPEED = 2.5;
  CAM_MIN_DIST = 30;
  CAM_ANGLE_MOVE = 0.5;
  CAM_MAX_ANGLE_DIFF = 10;
  CAM_PITCH_MAX = 90;
  CAM_PITCH_MIN = 0;
  CAM_YAW_MAX = 135;
  CAM_YAW_MIN = -135;

  HUD_MAX_LINES = 5;
  HUD_MAX_CHARS_PER_LINE = 256;

  STATUSBAR_ID_LINE = 1;
  SBAR_END = 4;

  STUDIO_LOOPING = 1;

  FCAP_CUSTOMSAVE = 1 shl 0;
  FCAP_ACROSS_TRANSITION = 1 shl 1;
  FCAP_MUST_SPAWN = 1 shl 2;
  FCAP_IMPULSE_USE = 1 shl 3;
  FCAP_CONTINUOUS_USE = 1 shl 4;
  FCAP_ONOFF_USE = 1 shl 5;
  FCAP_DIRECTIONAL_USE = 1 shl 6;
  FCAP_MASTER = 1 shl 7;

  FCAP_FORCE_TRANSITION = 1 shl 7;
  FCAP_DONT_SAVE = $80000000;

  TRACER_FREQ = 4;

  CLASS_NONE = 0;
  CLASS_MACHINE = 1;
  CLASS_PLAYER = 2;
  CLASS_HUMAN_PASSIVE = 3;
  CLASS_HUMAN_MILITARY = 4;
  CLASS_ALIEN_MILITARY = 5;
  CLASS_ALIEN_PASSIVE = 6;
  CLASS_ALIEN_MONSTER = 7;
  CLASS_ALIEN_PREY = 8;
  CLASS_ALIEN_PREDATOR = 9;
  CLASS_INSECT = 10;
  CLASS_PLAYER_ALLY = 11;
  CLASS_PLAYER_BIOWEAPON = 12;
  CLASS_ALIEN_BIOWEAPON = 13;
  CLASS_BARNACLE = 99;

  BAD_WEAPON = $7FFF;

  GIB_NORMAL = 0;
  GIB_NEVER = 1;
  GIB_ALWAYS = 2;

  PARALYZE_DURATION = 2;
  PARALYZE_DAMAGE = 1;
  NERVEGAS_DURATION = 2;
  NERVEGAS_DAMAGE = 5;
  POISON_DURATION = 5;
  POISON_DAMAGE = 2;
  RADIATION_DURATION = 2;
  RADIATION_DAMAGE = 1;
  ACID_DURATION = 2;
  ACID_DAMAGE = 5;
  SLOWBURN_DURATION = 2;
  SLOWBURN_DAMAGE = 1;
  SLOWFREEZE_DURATION = 2;
  SLOWFREEZE_DAMAGE = 1;

  ITBD_PARALYZE = 0;
  ITBD_NERVEGAS = 1;
  ITBD_POISON = 2;
  ITBD_RADIATION = 3;
  ITBD_DROWNRECOVER = 4;
  ITBD_ACID = 5;
  ITBD_SLOWBURN = 6;
  ITBD_SLOWFREEZE = 7;               

  CDMG_TIMEBASED = 8;

  DMG_GIB_CORPSE = DMG_CRUSH or DMG_FALL or DMG_BLAST or DMG_SONIC or DMG_CLUB;
  DMG_SHOWNHUD = DMG_POISON or DMG_ACID or DMG_FREEZE or DMG_SLOWFREEZE or DMG_DROWN or DMG_BURN or DMG_SLOWBURN or DMG_NERVEGAS or DMG_RADIATION or DMG_SHOCK;

  GIB_HEALTH_VALUE = -30;

  ROUTE_SIZE = 8;
  MAX_OLD_ENEMIES = 4;

  bits_CAP_DUCK = 1 shl 0;
  bits_CAP_JUMP = 1 shl 1;
  bits_CAP_STRAFE = 1 shl 2;
  bits_CAP_SQUAD = 1 shl 3;
  bits_CAP_SWIM = 1 shl 4;
  bits_CAP_CLIMB = 1 shl 5;
  bits_CAP_USE = 1 shl 6;
  bits_CAP_HEAR = 1 shl 7;
  bits_CAP_AUTO_DOORS = 1 shl 8;
  bits_CAP_OPEN_DOORS = 1 shl 9;
  bits_CAP_TURN_HEAD = 1 shl 10;
  bits_CAP_RANGE_ATTACK1 = 1 shl 11;
  bits_CAP_RANGE_ATTACK2 = 1 shl 12;
  bits_CAP_MELEE_ATTACK1 = 1 shl 13;
  bits_CAP_MELEE_ATTACK2 = 1 shl 14;
  bits_CAP_FLY = 1 shl 15;

  bits_CAP_DOORS_GROUP = bits_CAP_USE or bits_CAP_AUTO_DOORS or bits_CAP_OPEN_DOORS;
  bits_MEMORY_KILLED = 1 shl 7;
  bits_NODE_GROUP_REALM = 1;

  MS_MAX_MULTI_TARGETS = 16;
  MS_MAX_TARGETS = 32;

  ENTITY_FIELD_ORIGIN0 = 0;
  ENTITY_FIELD_ORIGIN1 = 1;
  ENTITY_FIELD_ORIGIN2 = 2;
  ENTITY_FIELD_ANGLES0 = 3;
  ENTITY_FIELD_ANGLES1 = 4;
  ENTITY_FIELD_ANGLES2 = 5;

  ENTITY_CUSTOMFIELD_ORIGIN0 = 0;
  ENTITY_CUSTOMFIELD_ORIGIN1 = 1;
  ENTITY_CUSTOMFIELD_ORIGIN2 = 2;
  ENTITY_CUSTOMFIELD_ANGLES0 = 3;
  ENTITY_CUSTOMFIELD_ANGLES1 = 4;
  ENTITY_CUSTOMFIELD_ANGLES2 = 5;
  ENTITY_CUSTOMFIELD_SKIN = 6;
  ENTITY_CUSTOMFIELD_SEQUENCE = 7;
  ENTITY_CUSTOMFIELD_ANIMTIME = 8;

  DOOR_SENTENCEWAIT = 6;
  DOOR_SOUNDWAIT = 3;
  BUTTON_SOUNDWAIT = 0.5;

  MEVENT_SPECIFIC = 0;
  MEVENT_SCRIPTED = 1000;
  MEVENT_SHARED = 2000;
  MEVENT_CLIENT = 5000;
  MEVENT_BODYDROP_LIGHT = 2001;
  MEVENT_BODYDROP_HEAVY = 2002;
  MEVENT_SWISHSOUND = 2010;

  HITGROUP_GENERIC = 0;
  HITGROUP_HEAD = 1;
  HITGROUP_CHEST = 2;
  HITGROUP_STOMACH = 3;
  HITGROUP_LEFTARM = 4;
  HITGROUP_RIGHTARM = 5;
  HITGROUP_LEFTLEG = 6;
  HITGROUP_RIGHTLEG = 7;

  ITEM_RESPAWN_TIME = 30;
  WEAPON_RESPAWN_TIME = 20;
  AMMO_RESPAWN_TIME = 20;

  AMMO_SMALL_WIDTH = 10;
  AMMO_LARGE_WIDTH = 20;

  MAX_ITEM_NAME = 32;

  TRAIN_STARTPITCH = 60;
  TRAIN_MAXPITCH = 200;
  TRAIN_MAXSPEED = 1000;

  FGUNTARGET_START_ON = 1 shl 0;

  TRAIN_ACTIVE = $80;
  TRAIN_NEW = $C0;
  TRAIN_OFF = 0;
  TRAIN_NEUTRAL = 1;
  TRAIN_SLOW = 2;
  TRAIN_MEDIUM = 3;
  TRAIN_FAST = 4;
  TRAIN_BACK = 5;

  FLASH_DRAIN_TIME = 1.2;
  FLASH_CHARGE_TIME = 0.2;

  ARMOR_RATIO = 0.2;
  ARMOR_BONUS = 0.5;

  PLAYER_AIRTIME = 12;
  PLAYER_SEARCH_RADIUS = 64;

  CLIMB_SHAKE_FREQUENCY = 22;
  MAX_CLIMB_SPEED = 200;
  CLIMB_SPEED_DEC = 15;
  CLIMB_PUNCH_X = -7;
  CLIMB_PUNCH_Z = 7;

  GEIGERDELAY = 0.25;

  SUITUPDATETIME = 3.5;
  SUITFIRSTUPDATETIME = 0.1;
  CSUITPLAYLIST = 4;
  CSUITNOREPEAT = 32;

  PLAYER_FATAL_FALL_SPEED = 1024;
  PLAYER_MAX_SAFE_FALL_SPEED = 580;
  DAMAGE_FOR_FALL_SPEED = 100 / (PLAYER_FATAL_FALL_SPEED - PLAYER_MAX_SAFE_FALL_SPEED);
  PLAYER_MIN_BOUNCE_SPEED = 200;
  PLAYER_FALL_PUNCH_THRESHHOLD = 350;

  PFLAG_ONLADDER = 1 shl 0;
  PFLAG_ONSWING = 1 shl 0;
  PFLAG_ONTRAIN = 1 shl 1;
  PFLAG_ONBARNACLE = 1 shl 2;
  PFLAG_DUCKING = 1 shl 3;
  PFLAG_USING = 1 shl 4;
  PFLAG_OBSERVER = 1 shl 5;

  SCRIPT_EVENT_DEAD = 1000;
  SCRIPT_EVENT_NOINTERRUPT = 1001;
  SCRIPT_EVENT_CANINTERRUPT = 1002;
  SCRIPT_EVENT_FIREEVENT = 1003;
  SCRIPT_EVENT_SOUND = 1004;
  SCRIPT_EVENT_SENTENCE = 1005;
  SCRIPT_EVENT_INAIR = 1006;
  SCRIPT_EVENT_ENDANIMATION = 1007;
  SCRIPT_EVENT_SOUND_VOICE = 1008;
  SCRIPT_EVENT_SENTENCE_RND1 = 1009;
  SCRIPT_EVENT_NOT_DEAD = 1010;

  SKILL_EASY = 1;
  SKILL_MEDIUM = 2;
  SKILL_HARD = 3;

  CDPVPRESETMAX = 27;
  CSENTENCE_LRU_MAX = 32;
  CSENTENCEG_MAX = 200;

  ANNOUNCE_MINUTES_MIN = 0.25;
  ANNOUNCE_MINUTES_MAX = 2.25;

  bits_SOUND_NONE = 0;
  bits_SOUND_COMBAT = 1 shl 0;
  bits_SOUND_WORLD = 1 shl 1;
  bits_SOUND_PLAYER = 1 shl 2;
  bits_SOUND_CARCASS = 1 shl 3;
  bits_SOUND_MEAT = 1 shl 4;
  bits_SOUND_DANGER = 1 shl 5;
  bits_SOUND_GARBAGE = 1 shl 6;

  bits_ALL_SOUNDS = $FFFFFFFF;

  SOUNDLIST_EMPTY = -1;
  SOUNDLISTTYPE_FREE = 1;
  SOUNDLISTTYPE_ACTIVE = 2;

  SOUND_NEVER_EXPIRE = -1;

  MAX_TEAMNAME_LENGTH = 16;
  MAX_TEAMS = 32;
  TEAMPLAY_TEAMLISTLENGTH = MAX_TEAMS * MAX_TEAMNAME_LENGTH;

  PATH_SPARKLE_DEBUG = 1;

  DONT_BLEED = -1;
  BLOOD_COLOR_RED = 247;
  BLOOD_COLOR_YELLOW = 195;
  BLOOD_COLOR_GREEN = BLOOD_COLOR_YELLOW;

  AMBIENT_SOUND_STATIC = 0;
  AMBIENT_SOUND_EVERYWHERE = 1 shl 0;
  AMBIENT_SOUND_SMALLRADIUS = 1 shl 1;
  AMBIENT_SOUND_MEDIUMRADIUS = 1 shl 2;
  AMBIENT_SOUND_LARGERADIUS = 1 shl 3;
  AMBIENT_SOUND_START_SILENT = 1 shl 4;
  AMBIENT_SOUND_NOT_LOOPING = 1 shl 5;

  SPEAKER_START_SILENT = 1;

  SND_STOP = 1 shl 5;
  SND_CHANGE_VOL = 1 shl 6;
  SND_CHANGE_PITCH = 1 shl 7;
  SND_SPAWNING = 1 shl 8;

  LFO_SQUARE = 1;
  LFO_TRIANGLE = 2;
  LFO_RANDOM = 3;

  PUSH_BLOCK_ONLY_X = 1;
  PUSH_BLOCK_ONLY_Y = 2;

  SPAWNFLAG_NOMESSAGE = 1;
  SPAWNFLAG_NOTOUCH = 1;
  SPAWNFLAG_DROIDONLY = 4;
  SPAWNFLAG_USEONLY = 1;
  TELE_PLAYER_ONLY = 1 shl 0;
  TELE_SILENT = 1 shl 1;

  GROUP_OP_AND = 0;
  GROUP_OP_NAND = 1;

  WEAPON_NOT_USED = 255;

  ITEM_FLAG_SELECTONEMPTY = 1 shl 0;
  ITEM_FLAG_NOAUTORELOAD = 1 shl 1;
  ITEM_FLAG_NOAUTOSWITCHEMPTY = 1 shl 2;
  ITEM_FLAG_LIMITINWORLD = 1 shl 3;
  ITEM_FLAG_EXHAUSTIBLE = 1 shl 4;

  WEAPON_IS_ONTARGET = 1 shl 6;
  WEAPON_FLAGS_SELECTONEMPTY = 1;

  MAX_DEATHNOTICES = 4;
  DEATHNOTICE_DISPLAY_TIME = 6;
  DEATHNOTICE_TOP = 32;

  TYPE_SNIPERDOT = 0;
  TYPE_ZOOM = 1;

  MAX_STATUSTEXT_LENGTH = 128;
  MAX_STATUSBAR_VALUES = 8;
  MAX_STATUSBAR_LINES = 2;

  STUDIO_NF_FLATSHADE = 1 shl 0;
  STUDIO_NF_CHROME = 1 shl 1;
  STUDIO_NF_FULLBRIGHT = 1 shl 2;

  STUDIO_X = 1 shl 0;
  STUDIO_Y = 1 shl 1;
  STUDIO_Z = 1 shl 2;
  STUDIO_XR = 1 shl 3;
  STUDIO_YR = 1 shl 4;
  STUDIO_ZR = 1 shl 5;
  STUDIO_LX = 1 shl 6;
  STUDIO_LY = 1 shl 7;
  STUDIO_LZ = 1 shl 8;
  STUDIO_AX = 1 shl 9;
  STUDIO_AY = 1 shl 10;
  STUDIO_AZ = 1 shl 11;
  STUDIO_AXR = 1 shl 12;
  STUDIO_AYR = 1 shl 13;
  STUDIO_AZR = 1 shl 14;
  STUDIO_TYPES = $7FFF;
  STUDIO_RLOOP = 1 shl 15;

  STUDIO_HAS_NORMALS = 1 shl 0;
  STUDIO_HAS_VERTICES = 1 shl 1;
  STUDIO_HAS_BBOX = 1 shl 2;
  STUDIO_HAS_CHROME = 1 shl 3;

  DEFAULT_SOUND_PACKET_VOLUME = 255;
  DEFAULT_SOUND_PACKET_ATTENUATION = 1;
  MAX_CHANNELS = 128;
  MAX_DYNAMIC_CHANNELS = 8;

  RAD_TO_STUDIO = 32768 / M_PI;
  STUDIO_TO_RAD = M_PI / 32768;

  AUTOAIM_2DEGREES = 0.0348994967025;
  AUTOAIM_5DEGREES = 0.08715574274766;
  AUTOAIM_8DEGREES = 0.1391731009601;
  AUTOAIM_10DEGREES = 0.1736481776669;

  DOT_1DEGREE = 0.9998476951564;
  DOT_2DEGREE = 0.9993908270191;
  DOT_3DEGREE = 0.9986295347546;
  DOT_4DEGREE = 0.9975640502598;
  DOT_5DEGREE = 0.9961946980917;
  DOT_6DEGREE = 0.9945218953683;
  DOT_7DEGREE = 0.9925461516413;
  DOT_8DEGREE = 0.9902680687416;
  DOT_9DEGREE = 0.9876883405951;
  DOT_10DEGREE = 0.9848077530122;
  DOT_15DEGREE = 0.9659258262891;
  DOT_20DEGREE = 0.9396926207859;
  DOT_25DEGREE = 0.9063077870367;

  LUMP_ENTITIES = 0;
  LUMP_PLANES = 1;
  LUMP_TEXTURES = 2;
  LUMP_VERTEXES = 3;
  LUMP_VISIBILITY = 4;
  LUMP_NODES = 5;
  LUMP_TEXINFO = 6;
  LUMP_FACES = 7;
  LUMP_LIGHTING = 8;
  LUMP_CLIPNODES = 9;
  LUMP_LEAFS = 10;
  LUMP_MARKSURFACES = 11;
  LUMP_EDGES = 12;
  LUMP_SURFEDGES = 13;
  LUMP_MODELS = 14;
  HEADER_LUMPS = 15;

  MOVE_NORMAL = 0;
  MOVE_NOMONSTERS = 1;
  MOVE_MISSILE = 2;

  VOICE_OUTPUT_SAMPLE_RATE = 11025;
  VOICE_CHANNEL_ERROR = -1;
  VOICE_CHANNEL_IN_TWEAK_MODE = -2;
  BYTES_PER_SAMPLE = 2;
  TWEAKMODE_ENTITYINDEX = -500;
  TWEAKMODE_CHANNELINDEX = -100;
  SPARK_TIME = 0.2;
  DIE_COUNTDOWN = 0.5;
  VOICE_RECEIVE_BUFFER_SIZE = VOICE_OUTPUT_SAMPLE_RATE * BYTES_PER_SAMPLE;
  TIME_PADDING = 0.2;
  LOCALPLAYERTALKING_TIMEOUT = 0.2;
  AUDIOSOURCE_COPYBUF_SIZE = 4096;
  MAX_SFX = 2048;
  DEFAULT_SOUND_PACKET_PITCH = 100;
  VOICE_NUM_CHANNELS = 5;

  ACTIVITY_NOT_AVAILABLE = -1;

type Activity = (ACT_RESET = 0, ACT_IDLE = 1, ACT_GUARD, ACT_WALK, ACT_RUN,
                 ACT_FLY, ACT_SWIM, ACT_HOP, ACT_LEAP, ACT_FALL, ACT_LAND,
                 ACT_STRAFE_LEFT, ACT_STRAFE_RIGHT, ACT_ROLL_LEFT, ACT_ROLL_RIGHT,
                 ACT_TURN_LEFT, ACT_TURN_RIGHT, ACT_CROUCH, ACT_CROUCHIDLE,
                 ACT_STAND, ACT_USE, ACT_SIGNAL1, ACT_SIGNAL2, ACT_SIGNAL3,
                 ACT_TWITCH, ACT_COWER, ACT_SMALL_FLINCH, ACT_BIG_FLINCH,
                 ACT_RANGE_ATTACK1, ACT_RANGE_ATTACK2, ACT_MELEE_ATTACK1,
                 ACT_MELEE_ATTACK2, ACT_RELOAD, ACT_ARM, ACT_DISARM, ACT_EAT,
                 ACT_DIESIMPLE, ACT_DIEBACKWARD, ACT_DIEFORWARD, ACT_DIEVIOLENT,
                 ACT_BARNACLE_HIT, ACT_BARNACLE_PULL, ACT_BARNACLE_CHOMP,
                 ACT_BARNACLE_CHEW, ACT_SLEEP, ACT_INSPECT_FLOOR, ACT_INSPECT_WALL,
                 ACT_IDLE_ANGRY, ACT_WALK_HURT, ACT_RUN_HURT, ACT_HOVER, ACT_GLIDE,
                 ACT_FLY_LEFT, ACT_FLY_RIGHT, ACT_DETECT_SCENT, ACT_SNIFF, ACT_BITE,
                 ACT_THREAT_DISPLAY, ACT_FEAR_DISPLAY, ACT_EXCITED,
                 ACT_SPECIAL_ATTACK1, ACT_SPECIAL_ATTACK2, ACT_COMBAT_IDLE,
                 ACT_WALK_SCARED, ACT_RUN_SCARED, ACT_VICTORY_DANCE,
                 ACT_DIE_HEADSHOT, ACT_DIE_CHESTSHOT, ACT_DIE_GUTSHOT,
                 ACT_DIE_BACKSHOT, ACT_FLINCH_HEAD, ACT_FLINCH_CHEST,
                 ACT_FLINCH_STOMACH, ACT_FLINCH_LEFTARM, ACT_FLINCH_RIGHTARM,
                 ACT_FLINCH_LEFTLEG, ACT_FLINCH_RIGHTLEG);

type resourcetype_t = (t_sound, t_skin, t_model, t_decal, t_generic, t_eventscript, t_world);

type ALERT_TYPE = (at_notice, at_console, at_aiconsole, at_warning, at_error, at_logged);

type PRINT_TYPE = (print_console, print_center, print_chat);

type FORCE_TYPE = (force_exactfile, force_model_samebounds, force_model_specifybounds,
                   force_model_specifybounds_if_avail);

type FIELDTYPE = (FIELD_FLOAT = 0, FIELD_STRING, FIELD_ENTITY, FIELD_CLASSPTR, FIELD_EHANDLE,
                  FIELD_EVARS, FIELD_EDICT, FIELD_VECTOR, FIELD_POSITION_VECTOR, FIELD_POINTER,
                  FIELD_INTEGER, FIELD_FUNCTION, FIELD_BOOLEAN, FIELD_SHORT, FIELD_CHARACTER,
                  FIELD_TIME, FIELD_MODELNAME, FIELD_SOUNDNAME, FIELD_TYPECOUNT);

type ptype_t = (pt_static, pt_grav, pt_slowgrav, pt_fire, pt_explode, pt_explode2, pt_blob, pt_blob2,
                pt_vox_slowgrav, pt_vox_grav, pt_clientcustom);

type VoiceTweakControl = (MicrophoneVolume = 0, OtherSpeakerScale, MicBoost);

type TRICULLSTYLE = (TRI_FRONT = 0, TRI_NONE = 1);

type cactive_t = (ca_dedicated = 0, ca_disconnected, ca_connecting, ca_connected, ca_uninitialized, ca_active);

type ECAM_Command = (CAM_COMMAND_NONE = 0, CAM_COMMAND_TOTHIRDPERSON = 1, CAM_COMMAND_TOFIRSTPERSON = 2);

type USE_TYPE = (USE_OFF = 0, USE_ON = 1, USE_SET = 2, USE_TOGGLE = 3);

type decal_e = (DECAL_GUNSHOT1 = 0, DECAL_GUNSHOT2, DECAL_GUNSHOT3, DECAL_GUNSHOT4,
                DECAL_GUNSHOT5, DECAL_LAMBDA1, DECAL_LAMBDA2, DECAL_LAMBDA3, DECAL_LAMBDA4,
                DECAL_LAMBDA5, DECAL_LAMBDA6, DECAL_SCORCH1, DECAL_SCORCH2, DECAL_BLOOD1,
                DECAL_BLOOD2, DECAL_BLOOD3, DECAL_BLOOD4, DECAL_BLOOD5, DECAL_BLOOD6,
                DECAL_YBLOOD1, DECAL_YBLOOD2, DECAL_YBLOOD3, DECAL_YBLOOD4, DECAL_YBLOOD5,
                DECAL_YBLOOD6, DECAL_GLASSBREAK1, DECAL_GLASSBREAK2, DECAL_GLASSBREAK3,
                DECAL_BIGSHOT1, DECAL_BIGSHOT2, DECAL_BIGSHOT3, DECAL_BIGSHOT4, DECAL_BIGSHOT5,
                DECAL_SPIT1, DECAL_SPIT2, DECAL_BPROOF1, DECAL_GARGSTOMP1, DECAL_SMALLSCORCH1,
                DECAL_SMALLSCORCH2, DECAL_SMALLSCORCH3, DECAL_MOMMABIRTH, DECAL_MOMMASPLAT);

type TANKBULLET = (TANK_BULLET_NONE = 0, TANK_BULLET_9MM = 1, TANK_BULLET_MP5 = 2, TANK_BULLET_12MM = 3);

type GLOBALENTSTATE = (GLOBAL_OFF = 0, GLOBAL_ON = 1, GLOBAL_DEAD = 2);

type MONSTERSTATE = (MONSTERSTATE_NONE = 0, MONSTERSTATE_IDLE, MONSTERSTATE_COMBAT,
                     MONSTERSTATE_ALERT, MONSTERSTATE_HUNT, MONSTERSTATE_PRONE,
                     MONSTERSTATE_SCRIPT, MONSTERSTATE_PLAYDEAD, MONSTERSTATE_DEAD);

type TOGGLE_STATE = (TS_AT_TOP, TS_AT_BOTTOM, TS_GOING_UP, TS_GOING_DOWN);

type cmd_source_t = (src_client, src_command);

type modtype_t = (mod_brush = 0, mod_sprite, mod_alias, mod_studio);

type synctype_t = (ST_SYNC = 0, ST_RAND);

type
 sequenceModifierBits_e = (
  SEQUENCE_MODIFIER_EFFECT_BIT = 1 shl 1,
  SEQUENCE_MODIFIER_POSITION_BIT = 1 shl 2,
  SEQUENCE_MODIFIER_COLOR_BIT = 1 shl 3,
  SEQUENCE_MODIFIER_COLOR2_BIT = 1 shl 4,
  SEQUENCE_MODIFIER_FADEIN_BIT = 1 shl 5,
  SEQUENCE_MODIFIER_FADEOUT_BIT = 1 shl 6,
  SEQUENCE_MODIFIER_HOLDTIME_BIT = 1 shl 7,
  SEQUENCE_MODIFIER_FXTIME_BIT = 1 shl 8,
  SEQUENCE_MODIFIER_SPEAKER_BIT = 1 shl 9,
  SEQUENCE_MODIFIER_LISTENER_BIT = 1 shl 10,
  SEQUENCE_MODIFIER_TEXTCHANNEL_BIT = 1 shl 11);

type
 sequenceCommandEnum_e = (
  SEQUENCE_COMMAND_ERROR = -1, SEQUENCE_COMMAND_PAUSE = 0,
  SEQUENCE_COMMAND_FIRETARGETS, SEQUENCE_COMMAND_KILLTARGETS,
  SEQUENCE_COMMAND_TEXT, SEQUENCE_COMMAND_SOUND, SEQUENCE_COMMAND_GOSUB,
  SEQUENCE_COMMAND_SENTENCE, SEQUENCE_COMMAND_REPEAT, SEQUENCE_COMMAND_SETDEFAULTS,
  SEQUENCE_COMMAND_MODIFIER, SEQUENCE_COMMAND_POSTMODIFIER, SEQUENCE_COMMAND_NOOP,
  SEQUENCE_MODIFIER_EFFECT, SEQUENCE_MODIFIER_POSITION, SEQUENCE_MODIFIER_COLOR,
  SEQUENCE_MODIFIER_COLOR2, SEQUENCE_MODIFIER_FADEIN, SEQUENCE_MODIFIER_FADEOUT,
  SEQUENCE_MODIFIER_HOLDTIME, SEQUENCE_MODIFIER_FXTIME, SEQUENCE_MODIFIER_SPEAKER,
  SEQUENCE_MODIFIER_LISTENER, SEQUENCE_MODIFIER_TEXTCHANNEL);

type sequenceCommandType_e = (SEQUENCE_TYPE_COMMAND, SEQUENCE_TYPE_MODIFIER);

type
 client_textmessage_s = ^client_textmessage_t;
 client_textmessage_t = record
  Effect: Longint;
  R1, G1, B1, A1, R2, G2, B2, A2: Byte;
  X, Y, FadeIn, FadeOut, HoldTime, FXTime: Single;
  Name, Message: PChar;
end;

type
 sequenceCommandMapping_s = ^sequenceCommandMapping_t;
 sequenceCommandMapping_t = record
  CommandEnum: sequenceCommandEnum_e;
  CommandName: PChar;
  CommandType: sequenceCommandType_e;
end;

type
 sequenceCommandLine_s = ^sequenceCommandLine_t;
 sequenceCommandLine_t = record
  CommandType: Longint;
  ClientMessage: client_textmessage_t;
  SpeakerName, ListenerName, SoundFileName, SentenceName,
  FireTargetNames, KillTargetNames: PChar;
  Delay: Single;
  RepeatCount, TextChannel, ModifierBitField: Longint;
  NextCommandLine: sequenceCommandLine_s;
end;

type
 sequenceEntry_s = ^sequenceEntry_t;
 sequenceEntry_t = record
  FileName, EntryName: PChar;
  FirstCommand: sequenceCommandLine_s;
  NextEntry: sequenceEntry_s;
  IsGlobal: Longint;
end;

type
 sentenceEntry_s = ^sentenceEntry_t;
 sentenceEntry_t = record
  Data: PChar;
  NextEntry: sentenceEntry_s;
  IsGlobal: Longint;
  Index: LongWord;
end;

type
 sentenceGroupEntry_s = ^sentenceGroupEntry_t;
 sentenceGroupEntry_t = record
  GroupName: PChar;
  NumSentences: LongWord;
  FirstSentence: sentenceEntry_s;
  NextEntry: sentenceGroupEntry_s;
end;

type
 vec2_s = ^vec2_t;
 vec2_t = record
  x, y: Single;
end;

type
 vec3_s = ^vec3_t;
 vec3_t = record
  x, y, z: Single;
end;

type
 vec4_s = ^vec4_t;
 vec4_t = record
  x, y, z, w: Single;
end;

type
 point_s = ^point_t;
 point_t = record
  X, Y: Longint;
end;

type
 wrect_s = ^wrect_t;
 wrect_t = record
  Left, Right, Top, Bottom: Longint;
end;

type
 event_args_s = ^event_args_t;
 event_args_t = record
  Flags, Index: Longint;
  Origin, Angles, Velocity: vec3_t;
  Ducking: Longint;
  fParam1, fParam2: Single;
  iParam1, iParam2, bParam1, bParam2: Longint;
end;

type
 Vector = vec3_t;
 delta_s = Pointer;
 TRejectArr = array[1..128] of Char;
 PPByte = ^PByte;
 TEmptyCallback = procedure; cdecl;
 PPLongint = ^PLongint;
 PSingle2 = ^PSingle;
 PSingle3 = ^PSingle2;
 PSingle4 = ^PSingle3;
 TUserMsgHook = function(const Name: PChar; Size: Longint; const Buffer: Pointer): Longint; cdecl;
 TEventHook = procedure(const Args: event_args_s); cdecl;
 TExtEnts = array[1..4] of Longint;
 PExtEnts = ^TExtEnts;
 TUPlayerID = array[1..16] of Char;
 PPLongWord = ^PLongWord;
 PPCardinal = ^PCardinal;
 TCallback = procedure cdecl;

type
 event_info_s = ^event_info_t;
 event_info_t = record
  Index: Word;
  PacketIndex, EntityIndex: Smallint;
  FireTime: Single;
  Args: event_args_t;
  Flags: Longint;
end;

type
 event_state_s = ^event_state_t;
 event_state_t = record
  ei: array[1..MAX_EVENT_QUEUE] of event_info_s;
end;

type
 usercmd_s = ^usercmd_t;
 usercmd_t = record
  LerpMSec: Smallint;
  MSec: Byte;
  ViewAngles: vec3_t;
  ForwardMove, SideMove, UpMove: Single;
  LightLevel: Byte;
  Buttons: Word;
  Impulse, WeaponSelect: Byte;
  ImpactIndex: Longint;
  ImpactPosition: vec3_t;
end;

type
 hudtextparms_s = ^hudtextparms_t;
 hudtextparms_t = record
  X, Y: Single;
  Effect: Longint;
  R1, G1, B1, A1, R2, G2, B2, A2: Byte;
  FadeInTime, FadeOutTime, HoldTime, FXTime: Single;
  Channel: Longint;
end;

type
 PColor24 = ^Color24;
 Color24 = record
  R, G, B: Byte;
 end;

 TColor24 = Color24;

type
 entity_state_s = ^entity_state_t;
 entity_state_t = record
  EntityType, Number: Longint;
  MsgTime: Single;
  MsgNum: Longint;
  Origin, Angles: vec3_t;
  ModelIndex, Sequence: Longint;
  Frame: Single;
  ColorMap: Longint;
  Skin, Solid: Smallint;
  Effects: Longint;
  Scale: Single;
  Flags: Byte;
  RenderMode, RenderAmt: Longint;
  RenderColor: Color24;
  RenderFX, MoveType: Longint;
  AnimTime, FrameRate: Single;
  Body: Longint;
  Controller: array[1..4] of Byte;
  Blending: array[1..2] of Byte;
  Velocity, MinS, MaxS: vec3_t;
  AimEnt, Owner: Longint;
  Friction, Gravity: Single;
  Team, PlayerClass, Health, Spectator, WeaponModel, GaitSequence: Longint;
  BaseVelocity: vec3_t;
  UseHull, OldButtons, OnGround, StepLeft: Longint;
  FallVelocity, FOV: Single;
  WeaponAnim: Longint;
  StartPos, EndPos: vec3_t;
  ImpactTime, StartTime: Single;
  iUser1, iUser2, iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
  vUser1, vUser2, vUser3, vUser4: vec3_t;  
end;

type
 clientdata_s = ^clientdata_t;
 clientdata_t = record
  Origin, Velocity: vec3_t;
  ViewModel: Longint;
  PunchAngle: vec3_t;
  Flags, WaterLevel, WaterType: Longint;
  ViewOffset: vec3_t;
  Health: Single;
  InDuck, Weapons, TimeStepSound, DuckTime, SwimTime, WaterJumpTime: Longint;
  MaxSpeed, FOV: Single;
  WeaponAnim, ID, AmmoShells, AmmoNails, AmmoCells, AmmoRockets: Longint;
  NextAttack: Single;
  TFState, PushMsec, DeadFlag: Longint;
  PhysInfo: array[1..MAX_PHYSINFO_STRING] of Char;
  iUser1, iUser2, iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
  vUser1, vUser2, vUser3, vUser4: vec3_t;
end;

type
 weapon_data_s = ^weapon_data_t;
 weapon_data_t = record
  ID, Clip: Longint;
  NextPrimaryAttack, NextSecondaryAttack, TimeWeaponIdle: Single;
  InReload, InSpecialReload: Longint;
  NextReload, PumpTime, ReloadTime, AimedDamage, NextAimBonus: Single;
  InZoom, WeaponState, iUser1, iUser2, iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
end;

type
 PWEAPON = ^WEAPON;
 WEAPON = record
  Name: array[1..MAX_WEAPON_NAME] of Char;
  AmmoType, AmmoType2, Max1, Max2, Slot, SlotPos, Flags, ID, Clip, Count, Active: Longint;
  RectActive: wrect_t;
  Inactive: Longint;
  RectInactive: wrect_t;
  Ammo: Longint;
  RectAmmo: wrect_t;
  Ammo2: Longint;
  RectAmmo2: wrect_t;
  Crosshair: Longint;
  RectCrosshair: wrect_t;
  AutoAim: Longint;
  RectAutoAim: wrect_t;
  ZoomedCrosshair: Longint;
  RectZoomedCrosshair: wrect_t;
  ZoomedAutoAim: Longint;
  RectZoomedAutoAim: wrect_t;
end;

type
 PITEM_INFO = ^ITEM_INFO;
 ITEM_INFO = record
  Name: array[1..MAX_ITEM_NAME] of Char;
  Sprite: Longint;
  Rect: wrect_t;
end;

type
 ItemInfo_s = ^ItemInfo_t;
 ItemInfo_t = record
  Slot, Position: Longint;
  Ammo1: PChar;
  MaxAmmo1: Longint;
  Ammo2: PChar;
  MaxAmmo2: Longint;
  Name: PChar;
  MaxClip, ID, Flags, Weight: Longint;
end;

type
 PDeathNoticeItem = ^DeathNoticeItem;
 DeathNoticeItem = record
  Killer, Victim: array[1..MAX_PLAYER_NAME_LENGTH * 2] of Char;
  SpriteIndex, Suicide, TeamKill, NonPlayerKill: Longint;
  DisplayTime: Single;
  KillerColor, VictimColor: vec3_s;
end;

type
 PHUDLIST = ^HUDLIST;
 HUDLIST = record
  Base: Pointer;
  Next: PHUDLIST;
end;

type
 local_state_s = ^local_state_t;
 local_state_t = record
  PlayerState: entity_state_t;
  Client: clientdata_t;
  WeaponData: array[1..32] of weapon_data_t;
end;

type
 activity_map_s = ^activity_map_t;
 activity_map_t = record
  ActivityType: Longint;
  Name: PChar;
end;

type
 PColorVec = ^ColorVec;
 ColorVec = record
  R, G, B, A: LongWord;
end;

type
 link_s = ^link_t;
 link_t = record
  Prev, Next: link_s;
end;

type
 edict_s = ^edict_t;

 entvars_s = ^entvars_t;
 entvars_t = record
  ClassName, GlobalName: Longint;
  Origin, OldOrigin, Velocity, BaseVelocity, CLBaseVelocity, MoveDir, Angles,
  AngleVelocity, PunchAngle, ViewAngle, EndPos, StartPos: vec3_t;
  ImpactTime, StartTime: Single;
  FixAngle: Longint;
  IdealPitch, PitchSpeed, IdealYaw, YawSpeed: Single;
  ModelIndex, Model, ViewModel, WeaponModel: Longint;
  AbsMin, AbsMax, MinS, MaxS, Size: vec3_t;
  LifeTime, NextThink: Single;
  MoveType, Solid, Skin, Body, Effects: Longint;
  Gravity, Friction: Single;
  LightLevel, Sequence, GaitSequence: Longint;
  Frame, AnimTime, FrameRate: Single;
  Controller: array[1..4] of Byte;
  Blending: array[1..2] of Byte;
  Scale: Single;
  RenderMode: Longint;
  RenderAmt: Single;
  RenderColor: vec3_t;
  RenderFX: Longint;
  Health, Frags: Single;
  Weapons: Longint;
  TakeDamage: Single;
  DeadFlag: Longint;
  ViewOffset: vec3_t;
  Button, Impulse: Longint;
  Chain, DmgInflictor, Enemy, AimEnt, Owner, GroundEntity: edict_s;
  SpawnFlags, Flags, ColorMap, Team: Longint;
  MaxHealth, TeleportTime, ArmorType, ArmorValue: Single;
  WaterLevel, WaterType, Target, TargetName, NetName, Message: Longint;
  DmgTake, DmgSave, Damage, DmgTime: Single;
  Noise, Noise2, Noise3, Noise4: Longint;
  Speed, AirFinished, PainFinished, RadSuitFinished: Single;
  ContainingEntity: edict_s;
  PlayerClass: Longint;
  MaxSpeed, FOV: Single;
  WeaponAnim, PushMSec, InDuck, TimeStepSound, SwimTime, DuckTime, StepLeft: Longint;
  FallVelocity: Single;
  GameState, OldButtons, GroupInfo, iUser1, iUser2, iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
  vUser1, vUser2, vUser3, vUser4: vec3_t;
  eUser1, eUser2, eUser3, eUser4: edict_s;
 end;
 
 edict_t = record
  Free, SerialNumber: Longint;
  Area: link_t;
  HeadNode, NumLeafs: Longint;
  LeafNums: array[1..MAX_ENT_LEAFS] of Smallint;
  FreeTime: Single;
  pvPrivateData: Pointer;
  v: entvars_t;
end;

type
 plane_s = ^plane_t;
 plane_t = record
  vPlaneNormal: vec3_t;
  Distance: Single;
end;

type
 pmplane_s = plane_s;
 pmplane_t = plane_t;

type
 trace_s = ^trace_t;
 trace_t = record
  AllSolid, StartSolid, InOpen, InWater: Longint;
  Fraction: Single;
  vEndPos: vec3_t;
  Plane: plane_t;
  pHit: edict_s;
  HitGroup: Longint;
end;

type
 pmtrace_s = ^pmtrace_t;
 pmtrace_t = record
  AllSolid, StartSolid, InOpen, InWater: Longint;
  Fraction: Single;
  vEndPos: vec3_t;
  Plane: plane_t;
  Entity: Longint;
  DeltaVelocity: vec3_t;
  HitGroup: Longint;
end;

type
 MD5Context_s = ^MD5Context_t;
 MD5Context_t = record
  Buffer: array[1..4] of LongWord;
  Bits: array[1..2] of LongWord;
  Data_In: array[1..64] of Char;
end;

type
 CRC32_s = ^CRC32_t;
 CRC32_t = LongWord;

type
 _resourceinfo_s = ^_resourceinfo_t;
 _resourceinfo_t = record
  Size: Longint;
end;

type
 resourceinfo_s = ^resourceinfo_t;
 resourceinfo_t = record
  Info: array[1..8] of _resourceinfo_t;
end;

type
 resource_s = ^resource_t;
 resource_t = record
  FileName: array[1..MAX_QPATH] of Char;
  ResourceType: resourcetype_t;
  Index, DownloadSize: Longint;
  Flags: Byte;
  MD5Hash: array[1..16] of Byte;
  PlayerNum: Byte;
  Reserved: array[1..32] of Byte;
  pNext, pPrev: resource_s;
end;

type
 customization_s = ^customization_t;
 customization_t = record
  InUse: Longint;
  Resource: resource_t;
  Translated: Longint;
  UserData1, UserData2: Longint;
  pInfo, pBuffer: Pointer;
  pNext: customization_s;
end;

type
 overviewinfo_s = ^overviewinfo_t;
 overviewinfo_t = record
  Map: array[1..64] of Char;
  Origin: vec3_t;
  Zoom: Single;
  Layers: Longint;
  LayersHeights: array[1..OVERVIEW_MAX_LAYERS] of Single;
  LayersImages: array[1..OVERVIEW_MAX_LAYERS, 1..255] of Char;
  Rotated, WindowX, WindowY, WindowHeight, WindowWidth: Longint;
end;

type
 lightstyle_s = ^lightstyle_t;
 lightstyle_t = record
  Length: Longint;
  Map: array[1..MAX_STYLESTRING] of Char;
end;

type
 cvar_s = ^cvar_t;
 cvar_t = record
  Name, Data: PChar;
  Flags: Longint;
  Value: Single;
  Next: cvar_s;
end;

type
 PTraceResult = ^TraceResult;
 TraceResult = record
  AllSolid, StartSolid, InOpen, InWater: Longint;
  Fraction: Single;
  vEndPos: vec3_t;
  PlaneDist: Single;
  vPlaneNormal: vec3_t;
  pHit: edict_s;
  HitGroup: Longint;
end;

type
 PCDStatus = ^CDStatus;
 CDStatus = record
  IsPlaying, WasPlaying, Initialized, Enabled, PlayLooping: Longint;
  CDVolume: Single;
  CDRom, PlayTrack: Longint;
end;

type
 mouth_s = ^mouth_t;
 mouth_t = record
  MouthOpen, SndCount: Byte;
  SndAvg: Longint;
end;

type
 latchedvars_s = ^latchedvars_t;
 latchedvars_t = record
  PrevAnimTime, SequenceTime: Single;
  PrevSeqBlending: array[1..2] of Byte;
  PrevOrigin, PrevAngles: vec3_t;
  PrevSequence: Longint;
  PrevFrame: Single;
  PrevController: array[1..4] of Byte;
  PrevBlending: array[1..2] of Byte;
end;

type
 position_history_s = ^position_history_t;
 position_history_t = record
  AnimTime: Single;
  Origin, Angles: vec3_t;
end;

type
 lump_s = ^lump_t;
 lump_t = record
  FileOffset, FileLength: Longint;
end;

type
 dheader_s = ^dheader_t;
 dheader_t = record
  Version: Longint;
  Lumps: array[1..HEADER_LUMPS] of lump_t;
end;

type
 dmodel_s = ^dmodel_t;
 dmodel_t = record
  MinS, MaxS, Origin: vec3_t;
  HeadNode: array[1..MAX_MAP_HULLS] of Longint;
  VisLeafs, FirstFace, NumFaces: Longint;
end;

type
 mplane_s = ^mplane_t;
 mplane_t = record
  Normal: vec3_t;
  Distance: Single;
  PlaneType, SignBits: Byte;
  Pad: array[1..2] of Byte;
end;

type
 mvertex_s = ^mvertex_t;
 mvertex_t = record
  Position: vec3_t;
end;

type
 medge_s = ^medge_t;
 medge_t = record
  v: array[1..2] of Word;
  CacheEdgeOffset: LongWord;
end;

type
 texture_s = ^texture_t;
 texture_t = record
  Name: array[1..16] of Char;
  Width, Height: LongWord;
  AnimTotal, AnimMin, AnimMax: Longint;
  AnimNext, AlternateAnims: texture_s;
  Offsets: array[1..MIPLEVELS] of LongWord;
  PalOffset: LongWord;
end;

type
 surfcache_s = ^surfcache_t;
 surfcache_t = record
  pNext: surfcache_s;
  pOwner: ^surfcache_s;
  LightAdjust: array[1..MAXLIGHTMAPS] of Longint;
  DLight, Size: Longint;
  Width, Height: LongWord;
  MipScale: Single;
  Texture: texture_s;
  Data: array[1..4] of Byte;
end;

type
 sspan_s = ^sspan_t;
 sspan_t = record
  U, V, Count: Longint;
end;

type
 mtexinfo_s = ^mtexinfo_t;
 mtexinfo_t = record
  Vectors: array[1..2, 1..4] of Single;
  MipAdjust: Single;
  Texture: texture_s;
  Flags: Longint;
end;

type
 mnode_s = ^mnode_t;
 mnode_t = record
  Contents, VisFrame: Longint;
  MinMaxS: array[1..6] of Smallint;
  Parent: mnode_s;
  Plane: mplane_s;
  Children: array[1..2] of mnode_s;
  FirstSurface, NumSurfaces: Word;
end;

type
 msurface_s = ^msurface_t;
 decal_s = ^decal_t;

 msurface_t = record
  VisFrame, DLightFrame, DLightBits: Longint;
  Plane: mplane_s;
  Flags, FirstEdge, NumEdges: Longint;
  CacheSpots: array[1..MIPLEVELS] of surfcache_s;
  TextureMinS, ExtEnts: array[1..2] of Smallint;
  TexInfo: mtexinfo_s;
  Styles: array[1..MAXLIGHTMAPS] of Byte;
  Samples: PColor24;
  pDecals: decal_s;
 end;

 decal_t = record
  pNext: decal_s;
  pSurface: msurface_s;
  OffsetX, OffsetY, Texture: Smallint;
  Scale, Flags: Byte;
  EntityIndex: Smallint;
end;

type
 dclipnode_s = ^dclipnode_t;
 dclipnode_t = record
  PlaneNum: Longint;
  Children: array[1..2] of Smallint;
end;

type
 hull_s = ^hull_t;
 hull_t = record
  ClipNodes: dclipnode_s;
  Planes: mplane_s;
  FirstClipNode, LastClipNode: Longint;
  Clip_MinS, Clip_MaxS: vec3_t;
end;

type
 cache_user_s = ^cache_user_t;
 cache_user_t = record
  Data: Pointer;
end;

type
 mleaf_s = ^mleaf_t;
 efrag_s = ^efrag_t;
 cl_entity_s = ^cl_entity_t;
 model_s = ^model_t;

 mleaf_t = record
  Contents, VisFrame: Longint;
  MinMaxS: array[1..6] of Smallint;
  Parent: mnode_s;
  CompressedVis: PByte;
  EntFrags: efrag_s;
  FirstMarkSurface: ^msurface_s;
  NumMarkSurfaces, Key: Longint;
  AmbientSoundLevel: array[1..NUM_AMBIENTS] of Byte;
 end;

 efrag_t = record
  Leaf: mleaf_s;
  LeafNext: efrag_s;
  Entity: cl_entity_s;
  EntityNext: efrag_s;
 end;

 cl_entity_t = record
  Index, Player: Longint;
  BaseLine, PrevState, CurState: entity_state_t;
  CurrentPosition: Longint;
  PosHistory: array[1..HISTORY_MAX] of position_history_t;
  Mouth: mouth_t;
  Latched: latchedvars_t;
  LastMove: Single;
  Origin, Angles: vec3_t;
  Attachment: array[1..4] of vec3_t;
  TrivialAccept: Longint;
  Model: model_s;
  EFrag: efrag_s;
  TopNode: mnode_s;
  SyncBase: Single;
  VisFrame: Longint;
  FloorColor: ColorVec;
 end;

 model_t = record
  Name: array[1..MAX_MODEL_NAME] of Char;
  NeedLoad: Longint;
  ModelType: modtype_t;
  NumFrames: Longint;
  SyncType: synctype_t;
  Flags: Longint;
  MinS, MaxS: vec3_t;
  Radius: Single;
  FirstModelSurface, NumModelSurfaces, NumSubModels: Longint;
  SubModels: dmodel_s;
  NumPlanes: Longint;
  Planes: mplane_s;
  NumLeafs: Longint;
  Leafs: mleaf_s;
  NumVertexes: Longint;
  Vertexes: mvertex_s;
  NumEdges: Longint;
  Edges: medge_s;
  NumNodes: Longint;
  Nodes: mnode_s;
  NumTexInfo: Longint;
  TexInfo: mtexinfo_s;
  NumSurfaces: Longint;
  Surfaces: msurface_s;
  NumSurfEdges: Longint;
  SurfEdges: PLongint;
  NumClipNodes: Longint;
  ClipNodes: dclipnode_s;
  NumMarkSurfaces: Longint;
  MarkSurfaces: ^msurface_s;
  Hulls: array[1..MAX_MAP_HULLS] of hull_t;
  NumTextures: Longint;
  Textures: ^texture_s;
  VisData: PByte;
  LightData: PColor24;
  Entities: PChar;
  Cache: cache_user_t;
end;

type
 overviewentity_s = ^overviewentity_t;
 overviewentity_t = record
  Sprite: Longint;
  Entity: cl_entity_s;
  KillTime: Double;
end;

type
 alight_s = ^alight_t;
 alight_t = record
  AmbientLight, ShadeLight: Longint;
  Color: vec3_t;
  pLightVec: vec3_s;
end;

type
 auxvert_s = ^auxvert_t;
 auxvert_t = record
  fv: array[1..3] of Single;                                       
end;

type
 player_info_s = ^player_info_t;
 player_info_t = record
  UserID: Longint;
  UserInfo: array[1..MAX_INFO_STRING] of Char;
  Name: array[1..MAX_SCOREBOARDNAME] of Char;
  Spectator, Ping, PacketLoss: Longint;
  Model: array[1..MAX_QPATH] of Char;
  TopColor, BottomColor, RenderFrame, GaitSequence: Longint;
  GaitFrame, GaitYaw: Single;
  PrevGaitOrigin: vec3_t;
  CustomData: customization_t;
end;

type
 studiohdr_s = ^studiohdr_t;
 studiohdr_t = record
  ID, Version: Longint;
  Name: array[1..64] of Char;
  Length: Longint;
  EyePosition, Min, Max, BBMin, BBMax: vec3_t;
  Flags, NumBones, BoneIndex, NumBoneControllers, BoneControllerIndex, NumHitBoxes, HitBoxIndex,
  NumSequence, SequenceIndex, NumSequenceGroups, SequenceGroupIndex, NumTextures, TextureIndex,
  TextureDataIndex, NumSkinRef, NumSkinFamilies, SkinIndex, NumBodyParts, BodyPartIndex,
  NumAttachments, AttachmentIndex, SoundTable, SoundIndex, SoundGroups, SoundGroupIndex,
  NumTransitions, TransitionIndex: Longint;
end;

type
 studioseqhdr_s = ^studioseqhdr_t;
 studioseqhdr_t = record
  ID, Version: Longint;
  Name: array[1..64] of Char;
  Length: Longint;
end;

type
 mstudiobone_s = ^mstudiobone_t;
 mstudiobone_t = record
  Name: array[1..32] of Char;
  Parent, Flags: Longint;
  BoneController: array[1..6] of Longint;
  Value: array[1..6] of Single;
  Scale: array[1..6] of Single;
end;

type
 mstudiobonecontroller_s = ^mstudiobonecontroller_t;
 mstudiobonecontroller_t = record
  Bone, BoneType: Longint;
  BoneStart, BoneEnd: Single;
  Rest, Index: Longint;
end;

type
 mstudiobbox_s = ^mstudiobbox_t;
 mstudiobbox_t = record
  Bone, Group: Longint;
  BBMin, BBMax: vec3_t;
end;

type
 mstudioevent_s = ^mstudioevent_t;
 mstudioevent_t = record
  Frame, Event, EventType: Longint;
  Options: array[1..64] of Char;
end;

type
 mstudioseqgroup_s = ^mstudioseqgroup_t;
 mstudioseqgroup_t = record
  SequenceLabel: array[1..32] of Char;
  Name: array[1..64] of Char;
  Cache: cache_user_t;
  Data: Longint;
end;

type
 mstudioseqdesc_s = ^mstudioseqdesc_t;
 mstudioseqdesc_t = record
  SequenceLabel: array[1..32] of Char;
  FPS: Single;
  Flags, Activity, ActWeight, NumEvents, EventIndex, NumFrames,
  NumPivots, PivotIndex, MotionType, MotionBone: Longint;
  LinearMovement: vec3_t;
  AutoMovePosIndex, AutoMoveAngleIndex: Longint;
  BBMin, BBMax: vec3_t;
  NumBlends, AnimIndex: Longint;
  BlendType: array[1..2] of Longint;
  BlendStart, BlendEnd: array[1..2] of Single;
  BlendParent: Longint;
  SequenceGroup: Longint;
  EntryNode, ExitNode, NodeFlags, NextSequence: Longint;
end;

type
 mstudiopivot_s = ^mstudiopivot_t;
 mstudiopivot_t = record
  Origin: vec3_t;
  PivotStart, PivotEnd: Longint;
end;

type
 mstudioattachment_s = ^mstudioattachment_t;
 mstudioattachment_t = record
  Name: array[1..32] of Char;
  AttachmentType, Bone: Longint;
  Origin: vec3_t;
  Vectors: array[1..3] of vec3_t;
end;

type
 mstudioanim_s = ^mstudioanim_t;
 mstudioanim_t = record
  Offset: array[1..6] of Word;
end;

type
 mstudioanimvalue_s = ^mstudioanimvalue_t;
 mstudioanimvalue_t = record
  case Boolean of
   False: (Num: record
    Valid, Total: Byte;
   end;);
   True: (Value: Smallint);
  end;

type
 mstudiobodyparts_s = ^mstudiobodyparts_t;
 mstudiobodyparts_t = record
  Name: array[1..64] of Char;
  NumModels, Base, ModelIndex: Longint;
end;

type
 mstudiotexture_s = ^mstudiotexture_t;
 mstudiotexture_t = record
  Name: array[1..64] of Char;
  Flags, Width, Height, Index: Longint;
end;

type
 mstudiomodel_s = ^mstudiomodel_t;
 mstudiomodel_t = record
  Name: array[1..64] of Char;
  ModelType: Longint;
  BoundingRadius: Single;
  NumMesh, MeshIndex, NumVerts, VertInfoIndex, VertIndex, NumNorms, NormInfoIndex,
  NormIndex, NumGroups, GroupIndex: Longint;
end;

type
 mstudiomesh_s = ^mstudiomesh_t;
 mstudiomesh_t = record
  NumTriangles, TriangleIndex, SkinRef, NumNorms, NormIndex: Longint;
end;

type
 screeninfo_s = ^screeninfo_t;
 screeninfo_t = record
  Size, Width, Height, Flags, CharHeight: Longint;
  CharWidths: array[1..256] of Smallint;
end;

type
 PScreenShake = ^TScreenShake;
 TScreenShake = record
  Amplitude, Duration, Frequency: Word;
end;

type
 PScreenFade = ^TScreenFade;
 TScreenFade = record
  Duration, HoldTime: Word;
  FadeFlags: Smallint;
  r, g, b, a: Byte;
end;

type
 RebuyStruct_s = ^RebuyStruct_t;
 RebuyStruct_t = record
  PrimaryItemID, PrimaryItemAmmo, SecondaryItemID,
  SecondaryItemAmmo, HEGrenadeAmmo, FlashbangAmmo, SmokeGrenadeAmmo,
  DefuseKit, NVGGoggles, Kevlar: Longint;
end;

type conditionalencode = procedure(pFields: delta_s; From, Dest: PChar); cdecl;

type
 enginefuncs_s = ^enginefuncs_t;
 enginefuncs_t = record
  PrecacheModel: function(ModelName: PChar): Longint; cdecl;
  PrecacheSound: function(SoundName: PChar): Longint; cdecl;
  SetModel: procedure(pEnt: edict_s; ModelName: PChar); cdecl;
  ModelIndex: function(ModelName: PChar): Longint; cdecl;
  ModelFrames: function(ModelIndex: Longint): Longint; cdecl;
  SetSize: procedure(pEnt: edict_s; vMin, vMax: vec3_s); cdecl;
  ChangeLevel: procedure(s1, s2: PChar); cdecl;
  GetSpawnParms: procedure(pEnt: edict_s); cdecl;
  SaveSpawnParms: procedure(pEnt: edict_s); cdecl;
  VecToYaw: function(vec: vec3_s): Single; cdecl;
  VecToAngles: procedure(vecIn, vecOut: vec3_s); cdecl;
  MoveToOrigin: procedure(pEnt: edict_s; Target: vec3_s; Distance: Single; MoveType: Longint); cdecl;
  ChangeYaw: procedure(pEnt: edict_s); cdecl;
  ChangePitch: procedure(pEnt: edict_s); cdecl;
  FindEntityByString: function(StartFrom: edict_s; Key, Value: PChar): edict_s; cdecl;
  GetEntityIllum: function(pEnt: edict_s): Longint; cdecl;
  FindEntityInSphere: function(StartFrom: edict_s; Origin: vec3_s; Distance: Single): edict_s; cdecl;
  FindClientInPVS: function(pEnt: edict_s): edict_s; cdecl;
  EntitiesInPVS: function(pEnt: edict_s): edict_s; cdecl;
  MakeVectors: procedure(vec: vec3_s); cdecl;
  AngleVectors: procedure(Vec, vForward, vRight, vUp: vec3_s); cdecl;
  CreateEntity: function: edict_s; cdecl;
  RemoveEntity: procedure(pEnt: edict_s); cdecl;
  CreateNamedEntity: function(Classname: Longint): edict_s; cdecl;
  MakeStatic: procedure(pEnt: edict_s); cdecl;
  EntIsOnFloor: function(pEnt: edict_s): Longint; cdecl;
  DropToFloor: function(pEnt: edict_s): Longint; cdecl;
  WalkMove: function(pEnt: edict_s; Yaw, Distance: Single; Mode: Longint): Longint; cdecl;
  SetOrigin: procedure(pEnt: edict_s; Origin: vec3_s); cdecl;
  EmitSound: procedure(pEnt: edict_s; Channel: Longint; Sample: PChar; Volume, Attenuation: Single; Flags, Pitch: Longint); cdecl;
  EmitAmbientSound: procedure(pEnt: edict_s; Origin: vec3_s; Sample: PChar; Volume, Attenuation: Single; Flags, Pitch: Longint); cdecl;
  TraceLine: procedure(v1, v2: vec3_s; NoMonsters: Longint; pEntToSkip: edict_s; pResult: PTraceResult); cdecl;
  TraceToss: procedure(pEnt: edict_s; pEntToSkip: edict_s; pResult: PTraceResult); cdecl;
  TraceMonsterHull: function(pEnt: edict_s; v1, v2: vec3_s; NoMonsters: Longint; pEntToSkip: edict_s; pResult: PTraceResult): Longint; cdecl;
  TraceHull: procedure(v1, v2: vec3_s; NoMonsters, HullNumber: Longint; pEntToSkip: edict_s; pResult: PTraceResult); cdecl;
  TraceModel: procedure(v1, v2: vec3_s; HullNumber: Longint; pEnt: edict_s; pResult: PTraceResult); cdecl;
  TraceTexture: function(pEnt: edict_s; v1, v2: vec3_s): PChar; cdecl;
  TraceSphere: procedure(v1, v2: vec3_s; NoMonsters: Longint; Radius: Single; pEntToSkip: edict_s; pResult: PTraceResult); cdecl;
  GetAimVector: procedure(pEnt: edict_s; Speed: Single; vec_return: vec3_s); cdecl;
  ServerCommand: procedure(Str: PChar); cdecl;
  ServerExecute: procedure; cdecl;
  ClientCommand: procedure(pEnt: edict_s; Str: PChar); cdecl;
  ParticleEffect: procedure(Origin: vec3_s; Direction: PSingle; Color, Count: Single); cdecl;
  LightStyle: procedure(Style: Longint; Value: PChar); cdecl;
  DecalIndex: function(DecalName: PChar): Longint; cdecl;
  PointContents: function(vec: vec3_s): Longint; cdecl;
  MessageBegin: procedure(Msg_Dest, Msg_Type: Longint; Origin: vec3_s; pEnt: edict_s); cdecl;
  MessageEnd: procedure; cdecl;
  WriteByte: procedure(Value: Longint); cdecl;
  WriteChar: procedure(Value: Longint); cdecl;
  WriteShort: procedure(Value: Longint); cdecl;
  WriteLong: procedure(Value: Longint); cdecl;
  WriteAngle: procedure(Value: Single); cdecl;
  WriteCoord: procedure(Value: Single); cdecl;
  WriteString: procedure(Str: PChar); cdecl;
  WriteEntity: procedure(Value: Longint); cdecl;
  CvarRegister: procedure(pCvar: cvar_s); cdecl;
  CvarGetFloat: function(CvarName: PChar): Single; cdecl;
  CvarGetString: function(CvarName: PChar): PChar; cdecl;
  CvarSetFloat: procedure(CvarName: PChar; Value: Single); cdecl;
  CvarSetString: procedure(CvarName, Value: PChar); cdecl;
  AlertMessage: procedure(AlertType: ALERT_TYPE; Msg: PChar); cdecl;
  EngineFPrintF: procedure(pFile: Pointer; Str: PChar); cdecl;
  PvAllocEntPrivateData: function(pEnt: edict_s; cb: LongWord): Pointer; cdecl;
  PvEntPrivateData: function(pEnt: edict_s): Pointer; cdecl;
  FreeEntPrivateData: procedure(pEnt: edict_s); cdecl;
  SzFromIndex: function(Ptr: Longint): PChar; cdecl;
  AllocString: function(Str: PChar): Longint; cdecl;
  GetVarsOfEnt: function(pEnt: edict_s): entvars_s; cdecl;
  PEntityOfEntOffset: function(Offset: Longint): edict_s; cdecl;
  EntOffsetOfPEntity: function(pEnt: edict_s): Longint; cdecl;
  IndexOfEdict: function(pEnt: edict_s): Longint; cdecl;
  PEntityOfEntIndex: function(Index: Longint): edict_s; cdecl;
  FindEntityByVars: function(pEntvars: entvars_s): edict_s; cdecl;
  GetModelPtr: function(pEnt: edict_s): Pointer; cdecl;
  RegUserMsg: function(Name: PChar; Size: Longint): Longint; cdecl;
  AnimationAutomove: procedure(pEnt: edict_s; Time: Single); cdecl;
  GetBonePosition: procedure(pEnt: edict_s; Bone: Longint; Origin, Angles: vec3_s); cdecl;
  FunctionFromName: function(Name: PChar): LongWord; cdecl;
  NameForFunction: function(Func: LongWord): PChar; cdecl;
  ClientPrintf: procedure(pEnt: edict_s; PrintType: PRINT_TYPE; Msg: PChar); cdecl;
  ServerPrint: procedure(Msg: PChar); cdecl;
  Cmd_Args: function: PChar; cdecl;
  Cmd_Argv: function(Count: Longint): PChar; cdecl;
  Cmd_Argc: function: Longint; cdecl;
  GetAttachment: procedure(pEnt: edict_s; Attachment: Longint; Origin, Angles: vec3_s); cdecl;
  CRC32_Init: procedure(CRC: CRC32_s); cdecl;
  CRC32_ProcessBuffer: procedure(PulCRC: CRC32_s; Ptr: Pointer; Length: Longint); cdecl;
  CRC32_ProcessByte: procedure(PulCRC: CRC32_s; Ch: Char); cdecl;
  CRC32_Final: function(PulCRC: CRC32_t): CRC32_t; cdecl;
  RandomLong: function(iLow, iHigh: LongWord): LongWord; cdecl;
  RandomFloat: function(flLow, flHigh: Single): Single; cdecl;
  SetView: procedure(pEnt, pTarget: edict_s); cdecl;
  Time: function: Single; cdecl;
  CrosshairAngle: procedure(pEnt: edict_s; Pitch, Yaw: Single); cdecl;
  LoadFileForMe: function(Name: PChar; Length: PLongint): Pointer; cdecl;
  FreeFile: procedure(Buffer: Pointer); cdecl;
  EndSection: procedure(Name: PChar); cdecl;
  CompareFileTime: function(Name1, Name2: PChar; Compare: PLongint): Longint; cdecl;
  GetGameDir: procedure(Buffer: PChar); cdecl;
  Cvar_RegisterVariable: procedure(Variable: cvar_s); cdecl;
  FadeClientVolume: procedure(pEnt: edict_s; FadePercent, FadeoutSeconds, HoldTime, FadeinSeconds: Longint); cdecl;
  SetClientMaxspeed: procedure(pEnt: edict_s; Speed: Single); cdecl;
  CreateFakeClient: function(Name: PChar): edict_s; cdecl;
  RunPlayerMove: procedure(pEnt: edict_s; Angles: vec3_s; ForwardMove, SideMove, UpMove: Single; Buttons: Smallint; Impulse, Msec: Byte); cdecl;
  NumberOfEntities: function: Longint; cdecl;
  GetInfoKeyBuffer: function(pEnt: edict_s): PChar; cdecl;
  InfoKeyValue: function(Buffer, Key: PChar): PChar; cdecl;
  SetKeyValue: procedure(Buffer, Key, Value: PChar); cdecl;
  SetClientKeyValue: procedure(ClientIndex: Longint; Buffer, Key, Value: PChar); cdecl;
  IsMapValid: function(Name: PChar): Longint; cdecl;
  StaticDecal: procedure(Origin: vec3_s; DecalIndex, EntityIndex, ModelIndex: Longint); cdecl;
  PrecacheGeneric: function(str: PChar): Longint; cdecl;
  GetPlayerUserID: function(pEnt: edict_s): Longint; cdecl;
  BuildSoundMsg: procedure(pEnt: edict_s; Channel: Longint; Sample: PChar; Volume, Attenuation: Single; Flags, Pitch, Msg_Dest, Msg_Type: Longint; Origin: vec3_s; pEnt2: edict_s); cdecl;
  IsDedicatedServer: function: Longint; cdecl;
  CvarGetPointer: function(CvarName: PChar): cvar_s; cdecl;
  GetPlayerWONID: function(pEnt: edict_s): Longint; cdecl;
  Info_RemoveKey: procedure(str: PChar; Key: PChar); cdecl;
  GetPhysicsKeyValue: function(pEnt: edict_s; Key: PChar): PChar; cdecl;
  SetPhysicsKeyValue: procedure(pEnt: edict_s; Key: PChar; Value: PChar); cdecl;
  GetPhysicsInfoString: function(pEnt: edict_s): PChar; cdecl;
  PrecacheEvent: function(EventType: Longint; Name: PChar): Smallint; cdecl;
  PlaybackEvent: procedure(Flags: Longint; pEnt: edict_s; EventIndex: Smallint; Delay: Single; Origin, Angles: vec3_s; fparam1, fparam2: Single; iparam1, iparam2, bparam1, bparam2: Longint); cdecl;
  SetFatPVS: function(Origin: vec3_s): PChar; cdecl;
  SetFatPAS: function(Origin: vec3_s): PChar; cdecl;
  CheckVisibility: function(pEnt: edict_s; pSet: PChar): Longint; cdecl;
  DeltaSetField: procedure(Fields: delta_s; FieldName: PChar); cdecl;
  DeltaUnsetField: procedure(Fields: delta_s; FieldName: PChar); cdecl;
  DeltaAddEncoder: procedure(Name: PChar; pConditionalEncode: conditionalencode); cdecl;
  GetCurrentPlayer: function: Longint; cdecl;
  CanSkipPlayer: function(pEnt: edict_s): Longint; cdecl;
  DeltaFindField: function(Fields: delta_s; FieldName: PChar): Longint; cdecl;
  DeltaSetFieldByIndex: procedure(Fields: delta_s; FieldNumber: Longint); cdecl;
  DeltaUnsetFieldByIndex: procedure(Fields: delta_s; FieldNumber: Longint); cdecl;
  SetGroupMask: procedure(Mask, Op: Longint); cdecl;
  CreateInstancedBaseline: function(Classname: Longint; Baseline: entity_state_s): Longint; cdecl;
  Cvar_DirectSet: procedure(Cvar: cvar_s; Value: PChar); cdecl;
  ForceUnmodified: procedure(FTType: FORCE_TYPE; MinS, MaxS: PSingle; FileName: PChar); cdecl;
  GetPlayerStats: procedure(pEnt: edict_s; Ping: PLongint; PacketLoss: PLongint); cdecl;
  AddServerCommand: procedure(Name: PChar; pFunction: TCallback); cdecl;
  Voice_GetClientListening: function(Receiver, Sender: Longint): Longint; cdecl;
  Voice_SetClientListening: function(Receiver, Sender: Longint; IsListening: Longint): Longint; cdecl;
  GetPlayerAuthID: function(pEnt: edict_s): PChar; cdecl;
  SequenceGet: function(FileName, EntryName: PChar): sequenceEntry_s; cdecl;
  SequencePickSentence: function(GroupName: PChar; PickMethod: Longint; Picked: PLongint): sentenceEntry_s; cdecl;
  GetFileSize: function(FileName: PChar): Longint; cdecl;
  GetApproxWavePlayLen: function(FilePath: PChar): Longint; cdecl;
  IsCareerMatch: function: Longint; cdecl;
  GetLocalizedStringLength: function(cLabel: PChar): Longint; cdecl;
  RegisterTutorMessageShown: procedure(MessageID: Longint); cdecl;
  GetTimesTutorMessageShown: function(MessageID: Longint): Longint; cdecl;
  ProcessTutorMessageDecayBuffer: procedure(Buffer: PLongint; Length: Longint); cdecl;
  ConstructTutorMessageDecayBuffer: procedure(Buffer: PLongint; Length: Longint); cdecl;
  ResetTutorMessageDecayData: procedure; cdecl;
  QueryClientCvarValue: procedure(pEnt: edict_s; CvarName: PChar); cdecl;
  QueryClientCvarValue2: procedure(pEnt: edict_s; CvarName: PChar; RequestID: Longint); cdecl;
  CheckParameter: function(Parameter: PChar; Next: PPChar): Longint; cdecl;
end;

type
 PTYPEDESCRIPTION = ^TYPEDESCRIPTION;
 TYPEDESCRIPTION = record
  FieldType: FIELDTYPE;
  FieldName: PChar;
  FieldOffset: Longint;
  FieldSize, Flags: Smallint;
end;

type
 PKeyValueData = ^KeyValueData;
 KeyValueData = record
  Classname, Key, Value: PChar;
  Handled: Longint;
end;

type
 KeyValueData_s = PKeyValueData;
 KeyValueData_t = KeyValueData;

type
 PLEVELLIST = ^LEVELLIST;
 LEVELLIST = record
  MapName, LandmarkName: array[1..32] of Char;
  pEntLandmark: edict_s;
  vLandmarkOrigin: vec3_t;
end;

type
 PENTITYTABLE = ^ENTITYTABLE;
 ENTITYTABLE = record
  ID: Longint;
  pEnt: edict_s;
  Location, Size, Flags, Classname: Longint;
end;

type
 PSAVERESTOREDATA = ^SAVERESTOREDATA;
 SAVERESTOREDATA = record
  BaseData, CurrentData: PChar;
  Size, BufferSize, TokenSize, TokenCount: Longint;
  Tokens: PPChar;
  CurrentIndex, TableCount, ConnectionCount: Longint;
  Table: PENTITYTABLE;
  LevelList: array[1..MAX_LEVEL_CONNECTIONS] of LEVELLIST;
  UseLandmark: Longint;
  LandmarkName: array[1..20] of Char;
  LandmarkOffset: vec3_t;
  Time: Single;
  CurrentMapName: array[1..32] of Char;
end;

type
 saverestore_s = PSAVERESTOREDATA;
 saverestore_t = SAVERESTOREDATA;

type
 particle_s = ^particle_t;
 particle_t = record
  Origin: vec3_t;
  Color, PackedColor: Smallint;
  pNext: particle_s;
  Velocity: vec3_t;
  Ramp, Die: Single;
  pType: ptype_t;
  DeathFunc: procedure(Particle: particle_s); cdecl;
  Callback: procedure(Particle: particle_s; Frametime: Single); cdecl;
  Context: Byte;
end;

type
 beam_s = ^beam_t;
 beam_t = record
  Next: beam_s;
  BeamType, Flags: Longint;
  Source, Target, Delta: vec3_t;
  Time, Frequency, Die, Width, Amplitude, R, G, B, Brightness, Speed,
  FrameRate, Frame: Single;
  Segments, StartEntity, EndEntity, ModelIndex, FrameCount: Longint;
  pFollowModel: model_s;
  Particles: particle_s;
end;

type
 physent_s = ^physent_t;
 physent_t = record
  Name: array[1..32] of Char;
  Player: Longint;
  Origin: vec3_t;
  Model, StudioModel: model_s;
  MinS, MaxS: vec3_t;
  Info: Longint;
  Angles: vec3_t;
  Solid, Skin, RenderMode: Longint;
  Frame: Single;
  Sequence: Longint;
  Controller: array[1..4] of Byte;
  Blending: array[1..2] of Byte;
  MoveType, TakeDamage, BloodDecal, Team, ClassNumber, iUser1, iUser2,
  iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
  vUser1, vUser2, vUser3, vUser4: vec3_t;
end;

type
 movevars_s = ^movevars_t;
 movevars_t = record
  Gravity, StopSpeed, MaxSpeed, SpectatorMaxSpeed, Accelerate, AirAccelerate,
  WaterAccelerate, Friction, EdgeFriction, WaterFriction, EntGravity, Bounce,
  StepSize, MaxVelocity, ZMax, WaveHeight: Single;
  FootSteps: Longint;
  SkyName: array[1..32] of Char;
  RollAngle, RollSpeed, SkyColorR, SkyColorG, SkyColorB, SkyVecX, SkyVecY,
  SkyVecZ: Single;
end;

type
 TPlayerInfoCallback = function(pEnt: physent_s): Longint; cdecl;

type
 playermove_s = ^playermove_t;
 playermove_t = record
  PlayerIndex, Server, Multiplayer: Longint;
  Time, FrameTime: Single;
  Forward, Right, Up, Origin, Angles, OldAngles, Velocity, MoveDir,
  BaseVelocity, ViewOffset: vec3_t;
  DuckTime: Single;
  InDuck, TimeStepSound, StepLeft: Longint;
  FallVelocity: Single;
  PunchAngle: vec3_t;
  SwimTime, NextPrimaryAttack: Single;
  Effects, Flags, UseHull: Longint;
  Gravity, Friction: Single;
  OldButtons: Longint;
  WaterJumpTime: Single;
  Dead, DeadFlag, Spectator, MoveType, OnGround, WaterLevel, WaterType,
  OldWaterLevel: Longint;
  TextureName: array[1..256] of Char;
  CTextureType: Char;
  MaxSpeed, ClientMaxSpeed: Single;
  iUser1, iUser2, iUser3, iUser4: Longint;
  fUser1, fUser2, fUser3, fUser4: Single;
  vUser1, vUser2, vUser3, vUser4: vec3_t;
  NumPhysEnt: Longint;
  PhysEnts: array[1..MAX_PHYSENTS] of physent_t;
  NumMoveEnt: Longint;
  MoveEnts: array[1..MAX_MOVEENTS] of physent_t;
  NumVisEnt: Longint;
  VisEnts: array[1..MAX_PHYSENTS] of physent_t;
  Cmd: usercmd_t;
  NumTouch: Longint;
  TouchIndex: array[1..MAX_PHYSENTS] of pmtrace_t;
  PhysInfo: array[1..MAX_PHYSINFO_STRING] of Char;
  MoveVars: movevars_s;
  PlayerMinS, PlayerMaxS: array[1..4] of vec3_t;
  PM_Info_ValueForKey: function(Buffer, Key: PChar): PChar; cdecl;
  PM_Particle: procedure(Origin: vec3_s; Color: Longint; Life: Single; ZPos, ZVel: Longint); cdecl;
  PM_TestPlayerPosition: function(Origin: vec3_s; pTrace: pmtrace_s): Longint; cdecl;
  Con_NPrintF: procedure(IDX: Longint; Msg: PChar); cdecl varargs;
  Con_DPrintF: procedure(Msg: PChar); cdecl varargs;
  Con_PrintF: procedure(Msg: PChar); cdecl varargs;
  Sys_FloatTime: function: Double; cdecl;
  PM_StuckTouch: procedure(HitEnt: Longint; pTraceResult: pmtrace_s); cdecl;
  PM_PointContents: function(Origin: vec3_s; TrueContents: PLongint): Longint; cdecl;
  PM_TruePointContents: function(Origin: vec3_s): Longint; cdecl;
  PM_HullPointContents: function(Hull: hull_s; Num: Longint; Origin: vec3_s): Longint; cdecl;
  PM_PlayerTrace: function(vStart, vEnd: vec3_s; TraceFlags, IgnorePE: Longint): pmtrace_t; cdecl;
  PM_TraceLine: function(vStart, vEnd: vec3_s; Flags, UseHull, IgnorePE: Longint): pmtrace_s; cdecl;
  RandomLong: function(Low, High: Longint): Longint; cdecl;
  RandomFloat: function(Low, High: Single): Single; cdecl;
  PM_GetModelType: function(Model: model_s): Longint; cdecl;
  PM_GetModelBounds: procedure(Model: model_s; MinS, MaxS: vec3_s); cdecl;
  PM_HullForBSP: function(pEnt: physent_s; Offset: vec3_s): Pointer; cdecl;
  PM_TraceModel: function(pEnt: physent_s; vStart, vEnd: vec3_s; Trace: trace_s): Single; cdecl;
  COM_FileSize: function(FileName: PChar): Longint; cdecl;
  COM_LoadFile: function(Path: PChar; UseHunk: Longint; Length: PLongint): PByte; cdecl;
  COM_FreeFile: procedure(Buffer: Pointer); cdecl;
  memfgets: function(pMemFile: PByte; FileSize: Longint; pFilePos: PLongint; pBuffer: PChar; BufferSize: Longint): PChar; cdecl;
  RunFuncs: Longint;
  PM_PlaySound: procedure(Channel: Longint; Sample: PChar; Volume, Attenuation: Single; Flags, Pitch: Longint); cdecl;
  PM_TraceTexture: function(Ground: Longint; vStart, vEnd: vec3_t): PChar; cdecl;
  PM_PlaybackEventFull: procedure(Flags, ClientIndex: Longint; EventIndex: Word; Delay: Single; Origin: vec3_s; Angles: vec3_s; fParam1, fParam2: Single; iParam1, iParam2, bParam1, bParam2: Longint); cdecl;
  PM_PlayerTraceEx: function(vStart, vEnd: vec3_s; TraceFlags: Longint; Callback: TPlayerInfoCallback): pmtrace_t; cdecl;
  PM_TestPlayerPositionEx: function(Origin: vec3_s; pTrace: pmtrace_s; Callback: TPlayerInfoCallback): Longint; cdecl;
  PM_TraceLineEx: function(vStart, vEnd: vec3_s; Flags, UseHull: Longint; Callback: TPlayerInfoCallback): pmtrace_s; cdecl;
end;

type
 netadrtype_t = (NA_UNUSED, NA_LOOPBACK, NA_BROADCAST, NA_IP, NA_IPX, NA_BROADCAST_IPX);

type
 netadr_s = ^netadr_t;
 netadr_t = record
  AddressType: netadrtype_t;
  IP: array[1..4] of Byte;
  IPX: array[1..10] of Byte;
  Port: Word;
end;

type
 net_adrlist_s = ^net_adrlist_t;
 net_adrlist_t = record
  Next: net_adrlist_s;
  RemoteAddress: netadr_t;
end;

type
 net_response_s = ^net_response_t;
 net_response_t = record
  Error, Context, ResponseType: Longint;
  RemoteAddress: netadr_t;
  Ping: Double;
  Response: Pointer;
end;

type net_api_response_func_t = procedure(const Response: net_response_s); cdecl;

type
 net_status_s = ^net_status_t;
 net_status_t = packed record
  Connected: Longint;
  LocalAddr, RemoteAddr: netadr_t;
  PacketLoss: Longint;
  Latency, ConnectionTime, Rate: Double;
end;

type
 net_api_s = ^net_api_t;
 net_api_t = record
  InitNetworking: procedure; cdecl;
  Status: procedure(Status: net_status_s); cdecl;
  SendRequest: procedure(Context, Request, Flags: Longint; Timeout: Double; RemoteAddress: netadr_s; Response: net_api_response_func_t); cdecl;
  CancelRequest: procedure(Context: Longint); cdecl;
  CancelAllRequests: procedure; cdecl;
  AdrToString: function(Addr: netadr_s): PChar; cdecl;
  CompareAdr: function(Addr1, Addr2: netadr_s): Longint; cdecl;
  StringToAdr: function(Str: PChar; Addr: netadr_s): Longint; cdecl;
  ValueForKey: function(Buff, Key: PChar): PChar; cdecl;
  RemoveKey: procedure(Buff, Key: PChar); cdecl;
  SetValueForKey: procedure(Buff, Key, Value: PChar; MaxSize: Longint); cdecl;
end;

type
 PDLL_FUNCTIONS = ^DLL_FUNCTIONS;
 DLL_FUNCTIONS = record
  GameInit: procedure; cdecl;
  Spawn: function(pEnt: edict_s): Longint; cdecl;
  Think: procedure(pEnt: edict_s); cdecl;
  Use: procedure(pEntUsed, pEntOther: edict_s); cdecl;
  Touch: procedure(pEntTouched, pEntOther: edict_s); cdecl;
  Blocked: procedure(pEntBlocked, pEntOther: edict_s); cdecl;
  KeyValue: procedure(pEnt: edict_s; pData: PKeyValueData); cdecl;
  Save: procedure(pEnt: edict_s; pSaveData: PSAVERESTOREDATA); cdecl;
  Restore: function(pEnt: edict_s; pSaveData: PSAVERESTOREDATA; GlobalEntity: Longint): Longint; cdecl;
  SetAbsBox: procedure(pEnt: edict_s); cdecl;
  SaveWriteFields: procedure(pSaveData: PSAVERESTOREDATA; Name: PChar; pBaseData: Pointer; pFields: PTYPEDESCRIPTION; FieldCount: Longint); cdecl;
  SaveReadFields: procedure(pSaveData: PSAVERESTOREDATA; Name: PChar; pBaseData: Pointer; pFields: PTYPEDESCRIPTION; FieldCount: Longint); cdecl;
  SaveGlobalState: procedure(pSaveData: PSAVERESTOREDATA); cdecl;
  RestoreGlobalState: procedure(pSaveData: PSAVERESTOREDATA); cdecl;
  ResetGlobalState: procedure; cdecl;
  ClientConnect: function(pEnt: edict_s; Name, Address: PChar; RejectReason: TRejectArr): Longint; cdecl;
  ClientDisconnect: procedure(pEnt: edict_s); cdecl;
  ClientKill: procedure(pEnt: edict_s); cdecl;
  ClientPutInServer: procedure(pEnt: edict_s); cdecl;
  ClientCommand: procedure(pEnt: edict_s); cdecl;
  ClientUserInfoChanged: procedure(pEnt: edict_s; Buffer: PChar); cdecl;
  ServerActivate: procedure(pEntityList: edict_s; EntityCount, MaxClients: Longint); cdecl;
  ServerDeactivate: procedure; cdecl;
  PlayerPreThink: procedure(pEnt: edict_s); cdecl;
  PlayerPostThink: procedure(pEnt: edict_s); cdecl;
  StartFrame: procedure; cdecl;
  ParmsNewLevel: procedure; cdecl;
  ParmsChangeLevel: procedure; cdecl;
  GetGameDescription: function: PChar; cdecl;
  PlayerCustomization: procedure(pEnt: edict_s; pCustom: customization_s); cdecl;
  SpectatorConnect: procedure(pEnt: edict_s); cdecl;
  SpectatorDisconnect: procedure(pEnt: edict_s); cdecl;
  SpectatorThink: procedure(pEnt: edict_s); cdecl;
  Sys_Error: procedure(ErrorString: PChar); cdecl;
  PM_Move: procedure(ppmove: playermove_s; Server: Longint); cdecl;
  PM_Init: procedure(ppmove: playermove_s); cdecl;
  PM_FindTextureType: function(Name: PChar): Char; cdecl;
  SetupVisibility: procedure(pTarget, pEnt: edict_s; PVS, PAS: PPByte); cdecl;
  UpdateClientData: procedure(pEnt: edict_s; SendWeapons: Longint; ClientData: clientdata_s); cdecl;
  AddToFullPack: function(State: entity_state_s; e: Longint; pEnt, pHost: edict_s; HostFlags, Player: Longint; pSet: PByte): Longint; cdecl;
  CreateBaseline: procedure(Player, EIndex: Longint; Baseline: entity_state_s; pEnt: edict_s; PlayerModelIndex: Longint; Player_MinS, Player_MaxS: vec3_t); cdecl;
  RegisterEncoders: procedure; cdecl;
  GetWeaponData: function(pEnt: edict_s; Info: weapon_data_s): Longint; cdecl;
  CmdStart: procedure(pEnt: edict_s; Command: usercmd_s; RandomSeed: LongWord); cdecl;
  CmdEnd: procedure(pEnt: edict_s); cdecl;
  ConnectionlessPacket: function(netFrom: netadr_s; args: PChar; ResponseBuffer: PChar; ResponseBufferSize: PLongint): Longint; cdecl;
  GetHullBounds: function(HullNumber: Longint; MinS, MaxS: vec3_s): Longint; cdecl;
  CreateInstancedBaselines: procedure; cdecl;
  InconsistentFile: function(pEnt: edict_s; FileName, DisconnectMessage: PChar): Longint; cdecl;
  AllowLagCompensation: function: Longint; cdecl;
end;

type
 PNEW_DLL_FUNCTIONS = ^NEW_DLL_FUNCTIONS;
 NEW_DLL_FUNCTIONS = record
  OnFreeEntPrivateData: procedure(pEnt: edict_s); cdecl;
  GameShutdown: procedure; cdecl;
  ShouldCollide: function(pEntTouched, pEntOther: edict_s): LongWord; cdecl;
  CVarValue: procedure(pEnt: edict_s; Value: PChar); cdecl;
  CVarValue2: procedure(pEnt: edict_s; RequestID: Longint; CvarName, Value: PChar); cdecl;
end;

type NEW_DLL_FUNCTIONS_FN = function(pFunctionTable: PNEW_DLL_FUNCTIONS; InterfaceVersion: PLongint): Longint; cdecl;

type APIFUNCTION = function(pFunctionTable: PDLL_FUNCTIONS; InterfaceVersion: Longint): Longint; cdecl;
type APIFUNCTION2 = function(pFunctionTable: PDLL_FUNCTIONS; InterfaceVersion: PLongint): Longint; cdecl;

type
 MonsterEvent_s = ^MonsterEvent_t;
 MonsterEvent_t = record
  Event: Longint;
  Options: PChar;
end;

type
 globalvars_s = ^globalvars_t;
 globalvars_t = record
  Time, FrameTime, Force_Retouch: Single;
  MapName, StartSpot: Longint;
  Deathmatch, Coop, Teamplay, ServerFlags, Found_Secrets: Single;
  vForward, vUp, vRight: vec3_t;
  Trace_AllSolid, Trace_StartSolid, Trace_Fraction: Single;
  Trace_EndPos, Trace_Plane_Normal: vec3_t;
  Trace_Plane_Dist: Single;
  Trace_Ent: edict_s;
  Trace_InOpen, Trace_InWater: Single;
  Trace_HitGroup, Trace_Flags, MsgEntity, CDAudioTrack,
  MaxClients, MaxEntities: Longint;
  StringBase: PChar;
  SaveData: Pointer;
  vLandmarkOffset: vec3_t;
end;

type
 client_data_s = ^client_data_t;
 client_data_t = record
  Origin, ViewAngles: vec3_t;
  WeaponBits: Longint;
  FOV: Single;
end;

type
 client_sprite_s = ^client_sprite_t;
 client_sprite_t = record
  Name, Sprite: array[1..64] of Char;
  HSprite, Resolution: Longint;
  Rect: wrect_t;
end;

type
 hud_player_info_s = ^hud_player_info_t;
 hud_player_info_t = record
  Name: PChar;
  Ping: Smallint;
  ThisPlayer, Spectator, PacketLoss: Byte;
  Model: PChar;
  TopColor, BottomColor: Smallint;
end;

type
 dlight_s = ^dlight_t;
 dlight_t = record
  Origin: vec3_t;
  Radius: Single;
  Color: Color24;
  Die, Decay, MinLight: Single;
  Key, Dark: Longint;
end;

type
 ref_params_s = ^ref_params_t;
 ref_params_t = record
  ViewOrigin, ViewAngles, Forward, Right, Up: vec3_t;
  FrameTime, Time: Single;
  Intermission, Paused, Spectator, OnGround, WaterLevel: Longint;
  SimVel, SimOrg, ViewHeight: vec3_t;
  IdealPitch: Single;
  ClViewAngles: vec3_t;
  Health: Longint;
  CrosshairAngle: vec3_t;
  ViewSize: Single;
  PunchAngle: vec3_t;
  MaxClients, ViewEntity, PlayerNum, MaxEntities, DemoPlayback, Hardware,
  Smoothing: Longint; 
  Cmd: usercmd_s;
  MoveVars: movevars_s;
  ViewPort: array[1..4] of Longint;
  NextView, OnlyClientDraw: Longint;
end;

type
 con_nprint_s = ^con_nprint_t;
 con_nprint_t = record
  Index: Longint;
  TTL: Single;
  Color: array[1..3] of Single;
end;

type
 demo_api_s = ^demo_api_t;
 demo_api_t = record
  IsRecording, IsPlayingBack, IsTimeDemo: function: Longint; cdecl;
  WriteBuffer: procedure(Size: Longint; const Buffer: PChar); cdecl;
end;

type
 exefuncs_s = ^exefuncs_t;
 exefuncs_t = record
  MMX, CPUMHz: Longint;
  unused1: procedure; cdecl;
  unused2: procedure; cdecl;
  unused3: procedure; cdecl;
  unused4: procedure; cdecl;
  VID_ForceLockState: procedure(LockState: Longint); cdecl;
  VID_ForceUnlockedAndReturnState: function: Longint; cdecl;
  unused5: procedure; cdecl;
  unused6: procedure; cdecl;
  unused7: procedure; cdecl;
  unused8: procedure; cdecl;
  unused9: procedure; cdecl;
  unused10: procedure; cdecl;
  unused11: procedure; cdecl;
  unused12: procedure; cdecl;
  unused13: procedure; cdecl;
  unused14: procedure; cdecl;
  unused15: procedure; cdecl;
  ErrorMessage: procedure(Level: Longint; Msg: PChar); cdecl;
  unused16: procedure; cdecl;
  Sys_PrintF: procedure(Msg: PChar); cdecl;
  unused17: procedure; cdecl;
  unused18: procedure; cdecl;
  unused19: procedure; cdecl;
  unused20: procedure; cdecl;
  unused21: procedure; cdecl;
  unused22: procedure; cdecl;
  unused23: procedure; cdecl;
  unused24: procedure; cdecl;
  unused25: procedure; cdecl;
  unused26: procedure; cdecl;
  unused27: procedure; cdecl;
end;

type
 engine_api_s = ^engine_api_t;
 engine_api_t = record
  Version, RenderType, Size: Longint;
  GetEngineState: function: Longint; cdecl;
  CBuf_AddText: procedure(Text: PChar); cdecl;
  CBuf_InsertText: procedure(Text: PChar); cdecl;
  Cmd_AddCommand: procedure(Name: PChar; Callback: TCallback); cdecl;
  Cmd_Argc: function: Longint; cdecl;
  Cmd_Args: function: PChar; cdecl;
  Cmd_Argv: function(Arg: Longint): PChar; cdecl;
  Con_PrintF: procedure(Msg: PChar); cdecl varargs;
  Con_SafePrintF: procedure(Msg: PChar); cdecl varargs;
  Cvar_Set: procedure(Name, Value: PChar); cdecl;
  Cvar_SetValue: procedure(Name: PChar; Value: Single); cdecl;
  Cvar_VariableInt: function(Name: PChar): Longint; cdecl;
  Cvar_VariableString: function(Name: PChar): PChar; cdecl;
  Cvar_VariableValue: function(Name: PChar): Single; cdecl;
  ForceReloadProfile: procedure; cdecl;
  GetGameInfo: function(GameInfo: Pointer; Channel: PChar): Longint; cdecl;
  GameSetBackground: procedure(Background: Longint); cdecl;
  GameSetState: procedure(State: Longint); cdecl;
  GameSetSubState: procedure(State: Longint); cdecl;
  GetPauseState: function: Longint; cdecl;
  Host_Frame: function(Time: Single; State: Longint; StateInfo: PLongint): Longint; cdecl;
  Host_GetHostInfo: procedure(FPS: PSingle; Active, Spectators, MaxPlayers: PLongint; Map: PChar); cdecl;
  Host_Shutdown: procedure; cdecl;
  Game_Init: function(CommandLine: PChar; pMem: PByte; Size: Longint; ExeFuncs: exefuncs_s; Ptr: Pointer; Value: Longint): Longint; cdecl;
  IN_ActivateMouse: procedure; cdecl;
  IN_ClearStates: procedure; cdecl;
  IN_DeactivateMouse: procedure; cdecl;
  IN_MouseEvent: procedure(MouseState: Longint); cdecl;
  Keyboard_ReturnToGame: procedure; cdecl;
  Key_ClearStates: procedure; cdecl;
  Key_Event: procedure(Key, Down: Longint); cdecl;
  LoadGame: function(Slot: PChar): Longint; cdecl;
  S_BlockSound: procedure; cdecl;
  S_ClearBuffer: procedure; cdecl;
  S_GetDSPointer: procedure(DirectSound, DirectSoundBuffer: PPointer); cdecl;
  S_GetWAVPointer: function: Pointer; cdecl;
  S_UnblockSound: procedure; cdecl;
  SaveGame: function(Slot, Comment: PChar): Longint; cdecl;
  SetAuth: procedure(pObject: Pointer); cdecl;
  SetMessagePumpDisableMode: procedure(Mode: Longint); cdecl;
  SetPauseState: procedure(PauseState: Longint); cdecl;
  SetStartupMode: procedure(StartupMode: Longint); cdecl;
  SNDDMA_Shutdown: procedure; cdecl;
  Snd_AcquireBuffer: procedure; cdecl;
  Snd_ReleaseBuffer: procedure; cdecl;
  StoreProfile: procedure; cdecl;
  Sys_FloatTime: function: Double; cdecl;
  VID_UpdateWindowVars: procedure(pRect: Pointer; X, Y: Longint); cdecl;
  VID_UpdateVID: procedure(pVID: Pointer); cdecl;
  VGUI_CallEngineSurfaceProc: procedure(HWND: Pointer; Msg, WParam, LParam: LongWord); cdecl;
  EngineTakingFocus: procedure; cdecl;
  LauncherTakingFocus: procedure; cdecl;
  {$IFDEF MSWINDOWS}
   GL_Init: procedure; cdecl;
   GL_SetMode: function(Game: LongWord; pMainDC, pBaseRC: PLongWord; D3D: Longint; pStr, CommandLine: PChar): Longint; cdecl;
   GL_Shutdown: procedure(Game, pMainDC, pBaseRC: LongWord); cdecl;
   QGL_D3DShared: procedure(D3DShared: Pointer); cdecl;
   glSwapBuffers: function(DC: LongWord): Longint; stdcall;
   DirectorProc: procedure(Command: LongWord; Params: Pointer); cdecl;
  {$ELSE}
   GL_Init: procedure; cdecl;
   GL_SetMode: procedure; cdecl;
   GL_Shutdown: procedure; cdecl;
   QGL_D3DShared: procedure; cdecl;
   glSwapBuffers: procedure; cdecl;
   DirectorProc: procedure; cdecl;
  {$ENDIF}
end;

type
 event_api_s = ^event_api_t;
 event_api_t = record
  Version: Longint;
  EV_PlaySound: procedure(Entity: Longint; Origin: vec3_s; Channel: Longint; Sample: PChar; Volume, Attn: Single; Flags, Pitch: Longint); cdecl;
  EV_StopSound: procedure(Entity, Channel: Longint; Sample: PChar); cdecl;
  EV_FindModelIndex: function(Model: PChar): Longint; cdecl;
  EV_IsLocal: function(PlayerNum: Longint): Longint; cdecl;
  EV_LocalPlayerDucking: function: Longint; cdecl;
  EV_LocalPlayerViewHeight: procedure(Height: vec3_s); cdecl;
  EV_LocalPlayerBounds: procedure(Hull: Longint; MinS, MaxS: vec3_s); cdecl;
  EV_IndexFromTrace: function(Trace: pmtrace_s): Longint; cdecl;
  EV_GetPhysEnt: function(ID: Longint): physent_s; cdecl;
  EV_SetUpPlayerPrediction: procedure(DoPrediction, IncludeLocalClient: Longint); cdecl;                                 
  EV_PushPMStates: procedure; cdecl;
  EV_PopPMStates: procedure; cdecl;
  EV_SetSolidPlayers: procedure(PlayerNum: Longint); cdecl;
  EV_SetTraceHull: procedure(Hull: Longint); cdecl;
  EV_PlayerTrace: procedure(vStart, vEnd: vec3_s; TraceFlags, IgnorePE: Longint; TraceResult: pmtrace_s); cdecl;
  EV_WeaponAnimation: procedure(Sequence, Body: Longint); cdecl;
  EV_PrecacheEvent: function(EventType: Longint; Name: PChar): Word; cdecl;
  EV_PlaybackEvent: procedure(Flags: Longint; pInvoker: edict_s; EventIndex: Word; Delay: Single; Origin, Angles: vec3_s; fParam1, fParam2: Single; iParam1, iParam2, bParam1, bParam2: Longint); cdecl;
  EV_TraceTexture: function(Ground: Longint; vStart, vEnd: vec3_s): PChar; cdecl;
  EV_StopAllSounds: procedure(EntityNum, Channel: Longint); cdecl;
  EV_KillEvents: procedure(EntityNum: Longint; EventName: PChar); cdecl;
end;

type
 IVoiceTweak_s = ^IVoiceTweak_t;
 IVoiceTweak_t = record
  StartVoiceTweakMode: function: Longint; cdecl;
  EndVoiceTweakMode: procedure; cdecl;
  SetControlFloat: procedure(Control: VoiceTweakControl; Value: Single); cdecl;
  GetControlFloat: function(Control: VoiceTweakControl): Single; cdecl;
  GetMaxVoicePitch: function: Longint; cdecl;
end;

type
 charinfo_s = ^charinfo_t;
 charinfo_t = record
  StartOffset, CharWidth: Smallint;
end;

type
 qfont_s = ^qfont_t;
 qfont_t = record
  Width, Height, RowCount, RowHeight: Longint;
  FontInfo: array[1..NUM_GLYPHS] of charinfo_t;
  Data: array[1..4] of Byte;
end;

type
 ptempent_s = ^tempent_s;
 tempent_s = ^tempent_t;
 tempent_t = record
  Flags: Longint;
  Die, FrameMax, X, Y, Z, FadeSpeed, BounceFactor: Single;
  HitSound: Longint;
  HitCallback: procedure(pEnt: tempent_s; TraceResult: pmtrace_s); cdecl; 
  Callback: procedure(pEnt: tempent_s; FrameTime, CurrentTime: Single); cdecl;
  Next: tempent_s;
  Priority: Longint;
  ClientIndex: Smallint;
  EntOffset: vec3_t;
  pEnt: cl_entity_t;
end;

type
 EFXProc_AllocParticle = procedure(Particle: particle_s; FrameTime: Single); cdecl;
 EFXProc_Particle = procedure(pEnt: tempent_s; TraceResult: pmtrace_s); cdecl;
 EFXProc_UserTracerParticle = procedure(Particle: particle_s); cdecl;
 EFXProc_TempEntAllocCustom = procedure(pEnt: tempent_s; FrameTime, CurrentTime: Single); cdecl;

type
 efx_api_s = ^efx_api_t;
 efx_api_t = record
  R_AllocParticle: function(Callback: EFXProc_AllocParticle): particle_s; cdecl;
  R_BlobExplosion: procedure(Origin: vec3_s); cdecl;
  R_Blood: procedure(Origin, Direction: vec3_s; Color, Speed: Longint); cdecl;
  R_BloodSprite: procedure(Origin: vec3_s; ColorIndex, ModelIndex, ModelIndex2: Longint; Size: Single); cdecl;
  R_BloodStream: procedure(Origin, Direction: vec3_s; Color, Speed: Longint); cdecl;
  R_BreakModel: procedure(Origin, Size, Direction: vec3_s; Random, Life: Single; Count, ModelIndex: Longint; Flags: Byte); cdecl;
  R_Bubbles: procedure(MinS, MaxS: vec3_s; Height: Single; ModelIndex, Count: Longint; Speed: Single); cdecl;
  R_BubbleTrail: procedure(vStart, vEnd: vec3_s; Height: Single; ModelIndex, Count: Longint; Speed: Single); cdecl;
  R_BulletImpactParticles: procedure(Origin: vec3_s); cdecl;
  R_EntityParticles: procedure(pEnt: cl_entity_s); cdecl;
  R_Explosion: procedure(Origin: vec3_s; ModelIndex: Longint; Scale, FrameRate: Single; Flags: Longint); cdecl;
  R_FizzEffect: procedure(pEnt: cl_entity_s; ModelIndex, Density: Longint); cdecl;
  R_FireField: procedure(Origin: vec3_s; Radius, ModelIndex, Count, Flags: Longint; Life: Single); cdecl;
  R_FlickerParticles: procedure(Origin: vec3_s); cdecl;
  R_FunnelSprite: procedure(Origin: vec3_s; ModelIndex, Reverse: Longint); cdecl;
  R_Implosion: procedure(Origin: vec3_s; Radius: Single; Count: Longint; Life: Single); cdecl;
  R_LargeFunnel: procedure(Origin: vec3_s; Reverse: Longint); cdecl;
  R_LavaSplash: procedure(Origin: vec3_s); cdecl;
  R_MultiGunshot: procedure(Origin, Direction: vec3_s; Noise: PSingle; Count, DecalCount: Longint; DecalIndices: PLongint); cdecl;
  R_MuzzleFlash: procedure(Origin: vec3_s; FlashType: Longint); cdecl;
  R_ParticleBox: procedure(MinS, MaxS: vec3_s; R, G, B: Byte; Life: Single); cdecl;
  R_ParticleBurst: procedure(Origin: vec3_s; Size, Color: Longint; Life: Single); cdecl;
  R_ParticleExplosion: procedure(Origin: vec3_s); cdecl;
  R_ParticleExplosion2: procedure(Origin: vec3_s; ColorStart, ColorLength: Longint); cdecl;
  R_ParticleLine: procedure(vStart, vEnd: vec3_s; R, G, B: Byte; Life: Single); cdecl;
  R_PlayerSprites: procedure(Client, ModelIndex, Count, Size: Longint); cdecl;
  R_Projectile: procedure(Origin, Velocity: vec3_s; ModelIndex, Life, Owner: Longint; HitCallback: EFXProc_Particle); cdecl;
  R_RicochetSound: procedure(Origin: vec3_s); cdecl;
  R_RicochetSprite: procedure(Origin: vec3_s; Model: model_s; Duration, Scale: Single); cdecl;
  R_RocketFlare: procedure(Origin: vec3_s); cdecl;
  R_RocketTrail: procedure(vStart, vEnd: vec3_s; TrailType: Longint); cdecl;
  R_RunParticleEffect: procedure(Origin, Direction: vec3_s; Color, Count: Longint); cdecl;
  R_ShowLine: procedure(vStart, vEnd: vec3_s); cdecl;
  R_SparkEffect: procedure(Origin: vec3_s; Count, VelocityMin, VelocityMax: Longint); cdecl;
  R_SparkShower: procedure(Origin: vec3_s); cdecl;
  R_SparkStreaks: procedure(Origin: vec3_s; Count, VelocityMin, VelocityMax: Longint); cdecl;
  R_Spray: procedure(Origin, Direction: vec3_s; ModelIndex, Count, Speed, Spread, RenderMode: Longint); cdecl;
  R_Sprite_Explode: procedure(pEnt: tempent_s; Scale: Single; Flags: Longint); cdecl;
  R_Sprite_Smoke: procedure(pEnt: tempent_s; Scale: Single); cdecl;
  R_Sprite_Spray: procedure(Origin, Direction: vec3_s; ModelIndex, Count, Speed, RandomValue: Longint); cdecl;
  R_Sprite_Trail: procedure(TrailType: Longint; vStart, vEnd: vec3_s; ModelIndex, Count: Longint; Life, Size, Amplitude: Single; RenderAmt: Longint; Speed: Single); cdecl;
  R_Sprite_WallPuff: procedure(pEnt: tempent_s; Scale: Single); cdecl;
  R_StreakSplash: procedure(Origin, Direction: vec3_s; Color, Count: Longint; Speed: Single; VelocityMin, VelocityMax: Longint); cdecl;
  R_TracerEffect: procedure(vStart, vEnd: vec3_s); cdecl;
  R_UserTracerParticle: procedure(Origin, Velocity: vec3_s; Life: Single; ColorIndex: Longint; Length: Single; DeathContext: Byte; DeathFunc: EFXProc_UserTracerParticle); cdecl;
  R_TracerParticles: function(Origin, Velocity: vec3_s; Life: Single): particle_s; cdecl;
  R_TeleportSplash: procedure(Origin: vec3_s); cdecl;
  R_TempSphereModel: procedure(Origin: vec3_s; Speed, Life: Single; Count, ModelIndex: Longint); cdecl;
  R_TempModel: function(Origin, Direction, Angles: vec3_s; Life: Single; ModelIndex, SoundType: Longint): tempent_s; cdecl;
  R_DefaultSprite: function(Origin: vec3_s; SpriteIndex: Longint; FrameRate: Single): tempent_s; cdecl;
  R_TempSprite: function(Origin, Direction: vec3_s; Scale: Single; ModelIndex, RenderMode, RenderFX: Longint; Alpha, Life: Single; Flags: Longint): tempent_s; cdecl;
  Draw_DecalIndex: function(ID: Longint): Longint; cdecl;
  Draw_DecalIndexFromName: function(Name: PChar): Longint; cdecl;
  R_DecalShoot: procedure(TextureIndex, Entity, ModelIndex: Longint; Origin: vec3_s; Flags: Longint); cdecl;
  R_AttachTEntToPlayer: procedure(Client, ModelIndex: Longint; ZOffset, Life: Single); cdecl;
  R_KillAttachedTEnts: procedure(Client: Longint); cdecl;
  R_BeamCirclePoints: function(BeamType: Longint; vStart, vEnd: vec3_s; ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single; StartFrame: Longint; FrameRate, R, G, B: Single): beam_s; cdecl;
  R_BeamEntPoint: function(StartEnt: Longint; vEnd: vec3_s; ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single; StartFrame: Longint; FrameRate, R, G, B: Single): beam_s; cdecl;
  R_BeamEnts: function(StartEnt: Longint; EndEnt: vec3_s; ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single; StartFrame: Longint; FrameRate, R, G, B: Single): beam_s; cdecl;
  R_BeamFollow: function(StartEnt, ModelIndex: Longint; Life, Width, R, G, B, Brightness: Single): beam_s; cdecl;
  R_BeamKill: procedure(Ent: Longint); cdecl; 
  R_BeamLightning: function(vStart, vEnd: vec3_s; ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single): beam_s; cdecl;
  R_BeamPoints: function(vStart, vEnd: vec3_s; ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single; StartFrame: Longint; FrameRate, R, G, B: Single): beam_s; cdecl;
  R_BeamRing: function(StartEnt, EndEnt, ModelIndex: Longint; Life, Width, Amplitude, Brightness, Speed: Single; StartFrame: Longint; FrameRate, R, G, B: Single): beam_s; cdecl;
  CL_AllocDLight: function(Key: Longint): dlight_s; cdecl;
  CL_AllocELight: function(Key: Longint): dlight_s; cdecl;
  CL_TempEntAlloc: function(Origin: vec3_s; Model: model_s): tempent_s; cdecl;
  CL_TempEntAllocNoModel: function(Origin: vec3_s): tempent_s; cdecl;
  CL_TempEntAllocHigh: function(Origin: vec3_s; Model: model_s): tempent_s; cdecl;
  CL_TempEntAllocCustom: function(Origin: vec3_s; Model: model_s; High: Longint; Callback: EFXProc_TempEntAllocCustom): tempent_s; cdecl;
  R_GetPackedColor: procedure(PackedColor: PSmallint; Color: Smallint); cdecl;
  R_LookupColor: function(R, G, B: Byte): Smallint; cdecl;
  R_DecalRemoveAll: procedure(TextureIndex: Longint); cdecl;
  R_DecalShootOffset: procedure(TextureIndex, Entity, ModelIndex: Longint; Origin: vec3_s; Flags: Longint; PolyOffset: PSingle); cdecl;  
end;

type
 TTextureBounds = array[1..4] of vec3_s;

type
 engine_studio_api_s = ^engine_studio_api_t;
 engine_studio_api_t = record
  Mem_CAlloc: function(Number: Longint; Size: LongWord): Pointer; cdecl;
  Cache_Check: function(Cache: cache_user_s): Pointer; cdecl;
  LoadCacheFile: procedure(Path: PChar; Cache: cache_user_s); cdecl;
  Mod_ForName: function(Name: PChar; CrashIfMissing: Longint): model_s; cdecl;
  Mod_ExtraData: function(Model: model_s): studiohdr_s; cdecl;
  GetModelByIndex: function(Index: Longint): model_s; cdecl;
  GetCurrentEntity: function: cl_entity_s; cdecl;
  PlayerInfo: function(Index: Longint): player_info_s; cdecl;
  GetPlayerState: function(Index: Longint): entity_state_s; cdecl;
  GetViewEntity: function: cl_entity_s; cdecl;
  GetTimes: procedure(FrameCount: PLongint; Current, Old: PDouble); cdecl;
  GetCvar: function(Name: PChar): cvar_s; cdecl;
  GetViewInfo: procedure(Origin, vUp, vRight, vVpn: vec3_s); cdecl;
  GetChromeSprite: function: model_s; cdecl;
  GetModelCounters: procedure(S, A: PPLongint); cdecl;
  GetAliasScale: procedure(X, Y: PSingle); cdecl;
  StudioGetBoneTransform: function: PSingle4; cdecl;
  StudioGetLightTransform: function: PSingle4; cdecl;
  StudioGetAliasTransform: function: PSingle3; cdecl;
  StudioGetRotationMatrix: function: PSingle3; cdecl;
  StudioSetupModel: procedure(BodyPart: Longint; PPBodyPart, PPSubModel: PPointer); cdecl;
  StudioCheckBBox: function: Longint; cdecl;
  StudioDynamicLight: procedure(pEnt: cl_entity_s; pLight: alight_s); cdecl;
  StudioEntityLight: procedure(pLight: alight_s); cdecl;
  StudioSetupLighting: procedure(pLighting: alight_s); cdecl;
  StudioDrawPoints: procedure; cdecl;
  StudioDrawHulls: procedure; cdecl;
  StudioDrawAbsBBox: procedure; cdecl;
  StudioDrawBones: procedure; cdecl;
  StudioSetupSkin: procedure(TextureHeader: Pointer; Index: Longint); cdecl;
  StudioSetRemapColors: procedure(Top, Bottom: Longint); cdecl;
  SetupPlayerModel: function(Index: Longint): model_s; cdecl;   
  StudioClientEvents: procedure; cdecl;
  GetForceFaceFlags: function: Longint; cdecl;                                         
  SetForceFaceFlags: procedure(Flags: Longint); cdecl;
  StudioSetHeader: procedure(Header: Pointer); cdecl;
  SetRenderModel: procedure(Model: model_s); cdecl;
  SetupRenderer: procedure(RenderMode: Longint); cdecl;
  RestoreRenderer: procedure; cdecl;
  SetChromeOrigin: procedure; cdecl;
  IsHardware: function: Longint; cdecl;
  GL_StudioDrawShadow: procedure; cdecl;
  GL_SetRenderMode: procedure(Mode: Longint); cdecl;
  SetRenderAmount: procedure(RenderAmt: Longint); cdecl;
  SetSwapMode: procedure(Mode: Longint); cdecl;
  SetShadow: procedure(Amount: Longint; const Bounds: TTextureBounds); cdecl;
end;

type
 server_studio_api_s = ^server_studio_api_t;
 server_studio_api_t = record
  Mem_CAlloc: function(Number: Longint; Size: LongWord): Pointer; cdecl;
  Cache_Check: function(Cache: cache_user_s): Pointer; cdecl;
  LoadCacheFile: procedure(Path: PChar; Cache: cache_user_s); cdecl;
  Mod_ExtraData: function(Model: model_s): studiohdr_s; cdecl;
end;

type
 pr_studio_interface_s = ^r_studio_interface_s;
 r_studio_interface_s = ^r_studio_interface_t;
 r_studio_interface_t = record
  Version: Longint;
  StudioDrawModel: function(Flags: Longint): Longint; cdecl;
  StudioDrawPlayer: function(Flags: Longint; pEnt: entity_state_s): Longint; cdecl;
end;

type
 sv_blending_interface_s = ^sv_blending_interface_t;
 sv_blending_interface_t = record
  Version: Longint;
  SV_StudioSetupBones: procedure(Model: model_s; Frame: Single; Sequence: Longint; Angles, Origin: vec3_s; Controller, Blending: PByte; Bone: Longint; pEnt: edict_s); cdecl;
end;

type
 screenfade_s = ^screenfade_t;
 screenfade_t = record
  FadeSpeed, FadeEnd, FadeTotalEnd, FadeReset: Single;
  FadeR, FadeG, FadeB, FadeAlpha: Byte;
  FadeFlags: Longint;
end;

type
 triangleapi_s = ^triangleapi_t;
 triangleapi_t = record
  Version: Longint;
  RenderMode: procedure(Mode: Longint); cdecl;
  GLBegin: function(PrimitiveCode: Longint): Longint; cdecl;
  GLEnd: procedure; cdecl;
  Color4F: procedure(R, G, B, A: Single); cdecl;
  Color4UB: procedure(R, G, B, A: Byte); cdecl;
  TexCoord2F: procedure(U, V: Single); cdecl;
  Vertex3FV: procedure(Origin: vec3_s); cdecl;
  Vertex3F: procedure(X, Y, Z: Single); cdecl;
  Brightness: procedure(Brightness: Single); cdecl;
  CullFace: procedure(Style: TRICULLSTYLE); cdecl;
  SpriteTexture: function(SpriteModel: model_s; Frame: Longint): Longint; cdecl;
  WorldToScreen: function(World, Screen: vec3_s): Longint; cdecl;
  Fog: procedure(FogColor: vec3_s; FogStart, FogEnd: Single; FogActivated: Longint); cdecl;
  ScreenToWorld: procedure(Screen, World: vec3_s); cdecl;
  GetFloatV: procedure(Name: LongWord; Params: PSingle); cdecl;
  R_ViewModelLightPoint: function(const VecStart, VecEnd: vec3_s): Longint; cdecl;
  GetGroundPlanePosition: procedure(const Origin: vec3_s; VecOut: vec3_s); cdecl;
  Color4FR: procedure(R, G, B, A: Single; RenderMode: Longint); cdecl;
  SetFogParams: procedure(Density, LockState: Longint); cdecl;
end;

type
 damage_image_s = ^damage_image_t;
 damage_image_t = record
  Expire, BaseLine: Single;
  X, Y: Longint;
end;

type
 hud_request_s = ^hud_request_t;
 hud_request_t = record
  pNext: hud_request_s;
  RemoteAddress: netadr_t;
  Context: Longint;
end;

type
 hud_server_s = ^hud_server_t;
 hud_server_t = record
  pNext: hud_server_s;
  RemoteAddress: netadr_t;
  Info: PChar;
  Ping: Longint;
end;

type
 kbutton_s = ^kbutton_t;
 kbutton_t = record
  HoldDown: array[1..2] of Longint;
  State: Longint;
end;

type
 kblist_s = ^kblist_t;
 kblist_t = record
  pNext: kblist_s;
  pKey: kbutton_s;
  Name: array[1..32] of Char;
end;

type
 selammo_s = ^selammo_t;
 selammo_t = record
  Ammo1Type, Ammo1, Ammo2Type, Ammo2: Byte;
end;

type
 locksounds_s = ^locksounds_t;
 locksounds_t = record
  LockedSound, LockedSentence, UnlockedSound, UnlockedSentence, NextLockedSentence,
  NextUnlockedSentence: Longint;
  WaitSound, WaitSentence: Single;
  EOFLocked, EOFUnlocked: Byte;
end;

type
 entity_field_alias_s = ^entity_field_alias_t;
 entity_field_alias_t = record
  Name: array[1..32] of Char;
  Field: Longint;
end;

type
 decallist_s = ^decallist_t;
 decallist_t = record
  Name: PChar;
  Index: Longint;
end;

type
 mevent_s = ^mevent_t;
 mevent_t = record
  Event: Longint;
  Options: PChar;
end;

type
 globalentity_s = ^globalentity_t;
 globalentity_t = record
  Name: array[1..64] of Char;
  LevelName: array[1..32] of Char;
  State: GLOBALENTSTATE;
  pNext: globalentity_s;
end;

type
 dynpitchvol_s = ^dynpitchvol_t;
 dynpitchvol_t = record
  Preset, PitchRun, PitchStart, SpinUp, SpinDown, VolRun, VolStart, FadeIn, FadeOut,
  LFOType, LFORate, LFOModPitch, LFOModVol, CSpinUp, CSpinCount, Pitch, SpinUpSav,
  SpinDownSav, PitchFrac, Volume, FadeInSav, FadeOutSav, VolFrac, LFOFrac, LFOMult: Longint;
end;

type
 cmd_s = ^cmd_t;
 cmd_t = record
  Next: cmd_s;
  Name: PChar;
  Callback: TCallback;
  HostType: Longint; 
end;

type
 cmd_function_s = cmd_s;
 cmd_function_t = cmd_t;

type
 alias_s = ^alias_t;
 alias_t = record
  Next: alias_s;
  Name: array[1..32] of Char;
  Value: PChar;
end;

type
 user_event_s = ^user_event_t;
 user_event_t = record
  Next: user_event_s;
  Name: PChar;
  Callback: TEventHook;
end;

type
 command_buffer_s = ^command_buffer_t;
 command_buffer_t = record
  Buffer: PChar;
  MaxLength, BufferLength: Longint;
end;

type
 user_msg_s = ^user_msg_t;
 user_msg_t = record
  Index: LongWord;
  Size: Longint;
  Name: array[1..16] of Char;
  Next: user_msg_s;
  Callback: TUserMsgHook;
end;

type
 PUserMsg = user_msg_s;
 TUserMsg = user_msg_t;

type
 hud_sprite_s = ^hud_sprite_t;
 hud_sprite_t = record
  Model: model_s;
  Name: PChar;
  FrameCount: Longint;
end;

type
 hud_sprite_array_s = ^hud_sprite_array_t;
 hud_sprite_array_t = array[1..MAX_HUD_SPRITES] of hud_sprite_t;

type
 server_msg_s = ^server_msg_t;
 server_msg_t = record
  Index: Longint;
  Name: PChar;
  Callback: TCallback;
end;

type
 server_msg_array_s = ^server_msg_array_t;
 server_msg_array_t = array[SVC_BAD..SVC_SENDCVARVALUE2] of server_msg_t;

type
 sizebuf_s = ^sizebuf_t;
 sizebuf_t = record
  AllowOverflow, Overflowed: Longint;
  Data: PByte;
  MaxSize, CurrentSize: Longint;
end;

type
 cl_enginefuncs_s = ^cl_enginefuncs_t;
 cl_enginefuncs_t = record
  SPR_Load: function(const Name: PChar): Longint; cdecl;
  SPR_Frames: function(Sprite: Longint): Longint; cdecl;
  SPR_Height: function(Sprite, Frame: Longint): Longint; cdecl;
  SPR_Width: function(Sprite, Frame: Longint): Longint; cdecl;
  SPR_Set: procedure(Sprite, R, G, B: Longint); cdecl;
  SPR_Draw: procedure(Frame, X, Y: Longint; const Rect: wrect_s); cdecl;
  SPR_DrawHoles: procedure(Frame, X, Y: Longint; const Rect: wrect_s); cdecl;
  SPR_DrawAdditive: procedure(Frame, X, Y: Longint; const Rect: wrect_s); cdecl;
  SPR_EnableScissor: procedure(X, Y, Width, Height: Longint); cdecl;
  SPR_DisableScissor: procedure; cdecl;
  SPR_GetList: function(List: PChar; Count: PLongint): client_sprite_s; cdecl;
  FillRGBA: procedure(X, Y: LongWord; Width, Height: Longint; R, G, B, A: LongWord); cdecl;
  GetScreenInfo: function(ScreenInfo: screeninfo_s): Longint; cdecl;
  SetCrosshair: procedure(Sprite: Longint; Rect: wrect_t; R, G, B: Longint); cdecl;
  RegisterVariable: function(const Name, Value: PChar; Flags: Longint): cvar_s; cdecl;
  GetCVarFloat: function(const Name: PChar): Single; cdecl;
  GetCVarString: function(const Name: PChar): PChar; cdecl;
  AddCommand: function(Name: PChar; Callback: TCallback): Longint; cdecl;
  HookUserMsg: function(Name: PChar; Callback: TUserMsgHook): Longint; cdecl;
  ServerCmd: function(Command: PChar): Longint; cdecl;
  ClientCmd: function(Command: PChar): Longint; cdecl;
  GetPlayerInfo: procedure(Entity: Longint; Info: hud_player_info_s); cdecl;
  PlaySoundByName: procedure(Name: PChar; Volume: Single); cdecl;
  PlaySoundByIndex: procedure(Index: Longint; Volume: Single); cdecl;
  AngleVectors: procedure(vAngles, vForward, vRight, vUp: vec3_s); cdecl;
  TextMessageGet: function(Name: PChar): client_textmessage_s; cdecl;
  DrawCharacter: function(X, Y, CharNumber, R, G, B: Longint): Longint; cdecl;
  DrawConsoleString: function(X, Y: Longint; Msg: PChar): Longint; cdecl;
  DrawSetTextColor: procedure(R, G, B: Single); cdecl;
  DrawConsoleStringLen: procedure(Msg: PChar; Length, Height: PLongint); cdecl;
  ConsolePrint: procedure(Msg: PChar); cdecl;
  CenterPrint: procedure(Msg: PChar); cdecl;
  GetWindowCenterX: function: Longint; cdecl;
  GetWindowCenterY: function: Longint; cdecl;
  GetViewAngles: procedure(Angles: vec3_s); cdecl;
  SetViewAngles: procedure(Angles: vec3_s); cdecl;
  GetMaxClients: function: Longint; cdecl;
  CVar_SetValue: procedure(Name: PChar; Value: Single); cdecl;
  Cmd_Argc: function: Longint; cdecl;
  Cmd_Argv: function(Index: Longint): PChar; cdecl;
  Con_PrintF: procedure(Msg: PChar); cdecl varargs;
  Con_DPrintF: procedure(Msg: PChar); cdecl varargs;
  Con_NPrintF: procedure(Position: Longint; Msg: PChar); cdecl varargs;
  Con_NXPrintF: procedure(Info: con_nprint_s; Msg: PChar); cdecl varargs;
  PhysInfo_ValueForKey: function(Key: PChar): PChar; cdecl;
  ServerInfo_ValueForKey: function(Key: PChar): PChar; cdecl;
  GetClientMaxSpeed: function: Single; cdecl;
  CheckParameter: function(Parameter: PChar; Next: PPChar): Longint; cdecl;
  Key_Event: procedure(Key, Down: Longint); cdecl;
  GetMousePosition: procedure(X, Y: PLongint); cdecl;
  IsNoClipping: function: Longint; cdecl;
  GetLocalPlayer: function: cl_entity_s; cdecl;
  GetViewModel: function: cl_entity_s; cdecl;
  GetEntityByIndex: function(Index: Longint): cl_entity_s; cdecl;
  GetClientTime: function: Single; cdecl;
  V_CalcShake: procedure; cdecl;
  V_ApplyShake: procedure(Origin, Angles: vec3_s; Factor: Single); cdecl;
  PM_PointContents: function(Origin: vec3_s; TrueContents: PLongint): Longint; cdecl;
  PM_WaterEntity: function(Origin: vec3_s): Longint; cdecl;
  PM_TraceLine: function(vStart, vEnd: vec3_s; Flags, UseHull, IgnorePE: Longint): pmtrace_s; cdecl;
  CL_LoadModel: function(Name: PChar; Index: PLongint): model_s; cdecl;
  CL_CreateVisibleEntity: function(EntityType: Longint; pEnt: cl_entity_s): Longint; cdecl;
  GetSpritePointer: function(Sprite: Longint): model_s; cdecl;
  PlaySoundByNameAtLocation: procedure(Name: PChar; Volume: Single; Origin: vec3_s); cdecl;
  PrecacheEvent: function(EventType: Longint; Name: PChar): Word; cdecl;
  PlaybackEvent: procedure(Flags: Longint; Invoker: edict_s; Index: Word; Delay: Single; Origin, Angles: vec3_s; fParam1, fParam2: Single; iParam1, iParam2, bParam1, bParam2: Longint); cdecl;
  WeaponAnim: procedure(Anim, Body: Longint); cdecl;
  RandomFloat: function(Low, High: Single): Single; cdecl;
  RandomLong: function(Low, High: Longint): Longint; cdecl;
  HookEvent: procedure(Name: PChar; Callback: TEventHook); cdecl;
  Con_IsVisible: function: Longint; cdecl;
  GetGameDirectory: function: PChar; cdecl;
  GetCVarPointer: function(Name: PChar): cvar_s; cdecl;
  Key_LookupBinding: function(Binding: PChar): PChar; cdecl;
  GetLevelName: function: PChar; cdecl;
  GetScreenFade: procedure(ScreenFade: screenfade_s); cdecl;
  SetScreenFade: procedure(ScreenFade: screenfade_s); cdecl;
  VGUI_GetPanel: function: Pointer; cdecl;
  VGUI_ViewPortPaintBackground: procedure(const ExtEnts: PExtEnts); cdecl;
  COM_LoadFile: function(Path: PChar; UseHunk: Longint; Length: PLongint): PByte; cdecl;
  COM_ParseFile: function(Data, Token: PChar): PChar; cdecl;
  COM_FreeFile: procedure(Buffer: Pointer); cdecl;
  TriangleAPI: triangleapi_s;
  EffectAPI: efx_api_s;
  EventAPI: event_api_s;
  DemoAPI: demo_api_s;
  NetAPI: net_api_s;
  VoiceTweak: IVoiceTweak_s;
  IsSpectateOnly: function: Longint; cdecl;
  LoadMapSprite: function(FileName: PChar): model_s; cdecl;
  COM_AddAppDirectoryToSearchPath: procedure(BaseDir, AppName: PChar); cdecl;
  COM_ExpandFileName: function(FileName, OutBuffer: PChar; OutBufferSize: Longint): Longint; cdecl;
  PlayerInfo_ValueForKey: function(Index: Longint; Key: PChar): PChar; cdecl;
  PlayerInfo_SetValueForKey: procedure(Key, Value: PChar); cdecl;
  GetPlayerUniqueID: function(Index: Longint; ID: TUPlayerID): Longint; cdecl;
  GetTrackerIDForPlayer: function(Index: Longint): Longint; cdecl;
  GetPlayerForTrackerID: function(TrackerID: Longint): Longint; cdecl;
  ServerCmdUnreliable: function(Command: PChar): Longint; cdecl;
  GetMousePos: procedure(Position: point_s); cdecl;
  SetMousePos: procedure(X, Y: Longint); cdecl;
  SetMouseEnable: procedure(Enable: Longint); cdecl;
  GetCVarList: function: cvar_s; cdecl;
  GetCmdList: function: cmd_s; cdecl;
  GetCVarName: function(const CVar: cvar_s): PChar; cdecl;
  GetCmdName: function(const Command: cmd_s): PChar; cdecl;
  GetClientPrevTime: function: Single; cdecl;
  GetClientGravity: function: Single; cdecl;
  PrecacheGeneric: function(Index: Longint): model_s; cdecl;
  OverrideLightMap: procedure(EnableOverride: Longint); cdecl;
  SetLightMapColor: procedure(R, G, B: Single); cdecl;
  SetLightMapDarkness: procedure(DarknessValue: Single); cdecl;
  SequenceGet: function(const FileName, EntryName: PChar): sequenceEntry_s; cdecl;
  SPR_DrawGeneric: procedure(Frame, X, Y: Longint; const Rect: wrect_s; BlendSrc, BlendDst, PP1, PP2: Longint); cdecl;
  SequencePickSentence: function(const GroupName: PChar; PickMethod: Longint; Picked: PLongint): sentenceEntry_s; cdecl;
  DrawLocalizedHUDString: function(X, Y: Longint; const Msg: PChar; R, G, B: Longint): Longint; cdecl;
  DrawLocalizedConsoleString: function(X, Y: Longint; const Msg: PChar; R, G, B: Longint): Longint; cdecl;
  LocalPlayerInfo_ValueForKey: function(const Key: PChar): PChar; cdecl;
  DrawText: function(X, Y: Longint; const Msg: PChar; Font: LongWord): Longint; cdecl;
  DrawUnicodeCharacter: function(X, Y: Longint; Number: Smallint; R, G, B: Longint; Font: LongWord): Longint; cdecl;
  GetApproxWavePlayLen: function(const FilePath: PChar): Longint; cdecl;
  GetCareerUI: function: Pointer; cdecl;
  CVar_Set: procedure(const Name, Value: PChar); cdecl;
  IsCareerMatch: function: Longint; cdecl;
  PlaySound: procedure(const Name: PChar; Volume: Single; Pitch: Longint); cdecl;
  PlayMP3: procedure(const Name: PChar; Flags: Longint); cdecl;
  Sys_FloatTime: function: Double; cdecl;
  ProcessTutorMessageDecayBuffer: procedure(Buffer: PLongint; Length: Longint); cdecl;
  ConstructTutorMessageDecayBuffer: procedure(Buffer: PLongint; Length: Longint); cdecl;
  ResetTutorMessageDecayData: function: Longint; cdecl;
  PlaySound2: procedure(const Name: PChar; Volume: Single; Pitch: Longint); cdecl;
  FillRGBA2: procedure(X, Y: LongWord; Width, Height: Longint; R, G, B, A: LongWord); cdecl;
  GetGameID: function: Longint; cdecl;
  GetAliasList: function: alias_s; cdecl;
end;

type
 TAddVisibleEntityCallback = function(pEnt: cl_entity_s): Longint; cdecl;
 TTempEntPlaySoundCallback = procedure(pEnt: tempent_s; Damp: Single); cdecl;

type
 exporttable_s = ^exporttable_t;
 exporttable_t = record
  Initialize: function(pEngfuncs: cl_enginefuncs_s; Version: Longint): Longint; cdecl;
  HUD_Init: function: Longint; cdecl;
  HUD_VidInit: function: Longint; cdecl;
  HUD_Redraw: function(const Time: Single; const Intermission: Longint): Longint; cdecl;
  HUD_UpdateClientData: function(Data: client_data_s; Time: Single): Longint; cdecl;
  HUD_Reset: function: Longint; cdecl;
  HUD_PlayerMove: procedure(const PlayerMove: playermove_s; const Server: Longint); cdecl;
  HUD_PlayerMoveInit: procedure(PlayerMove: playermove_s); cdecl;
  HUD_PlayerMoveTexture: function(Name: PChar): Byte; cdecl;
  IN_ActivateMouse: procedure; cdecl;
  IN_DeactivateMouse: procedure; cdecl;
  IN_MouseEvent: procedure(State: Longint); cdecl;
  IN_ClearStates: procedure; cdecl;
  IN_Accumulate: procedure; cdecl;
  CL_CreateMove: procedure(const FrameTime: Single; const Command: usercmd_s; const Active: Longint); cdecl;
  CL_IsThirdPerson: function: Longint; cdecl;
  CL_CameraOffset: procedure(Offset: vec3_s); cdecl;
  KB_Find: function(Name: PChar): kbutton_s; cdecl;
  CAM_Think: procedure; cdecl;
  V_CalcRefDef: procedure(Params: ref_params_s); cdecl;
  HUD_AddEntity: function(const EntityType: Longint; const pEnt: cl_entity_s; const ModelName: PChar): Longint; cdecl;
  HUD_CreateEntities: procedure; cdecl;
  HUD_DrawNormalTriangles: procedure; cdecl;
  HUD_DrawTransparentTriangles: procedure; cdecl;
  HUD_StudioEvent: procedure(Event: mstudioevent_s; pEnt: cl_entity_s); cdecl;
  HUD_PostRunCmd: procedure(CmdFrom, CmdTo: local_state_s; Cmd: usercmd_s; RunFuncs: Longint; Time: Double; RandomSeed: LongWord); cdecl;
  HUD_Shutdown: procedure; cdecl;
  HUD_TxferLocalOverrides: procedure(State: entity_state_s; Client: clientdata_s); cdecl;
  HUD_ProcessPlayerState: procedure(Destination, Source: entity_state_s); cdecl;
  HUD_TxferPredictionData: procedure(Destination, Source: entity_state_s; ClientDst, ClientSrc: clientdata_s; WeaponDst, WeaponSrc: weapon_data_s); cdecl;
  Demo_ReadBuffer: procedure(Size: Longint; Buffer: PByte); cdecl;
  HUD_ConnectionlessPacket: function(From: netadr_s; Args, Buffer: PChar; BufferSize: PLongint): Longint; cdecl;
  HUD_GetHullBounds: function(HullNumber: Longint; MinS, MaxS: vec3_s): Longint; cdecl;
  HUD_Frame: procedure(const Time: Double); cdecl;
  HUD_Key_Event: function(const Down, KeyNum: Longint; const Binding: PChar): Longint; cdecl;
  HUD_TempEntUpdate: procedure(FrameTime, ClientTime, ClientGravity: Double; TempEntFree, ppTempEntActive: ptempent_s; Callback_AddVisibleEntity: TAddVisibleEntityCallback; Callback_TempEntPlaySound: TTempEntPlaySoundCallback); cdecl;
  HUD_GetUserEntity: function(Index: Longint): cl_entity_s; cdecl;
  HUD_VoiceStatus: function(Index, Talking: Longint): Longint; cdecl;
  HUD_DirectorMessage: procedure(Size: Longint; Buffer: Pointer); cdecl;
  HUD_GetStudioModelInterface: function(Version: Longint; pInterface: pr_studio_interface_s; pStudio: engine_studio_api_s): Longint; cdecl;
  HUD_ChatInputPosition: function(const X, Y: PLongint): Longint; cdecl;
  HUD_GetPlayerTeam: function(Index: LongWord): Longint; cdecl;
  ClientFactory: function: LongWord; cdecl;
end;

type
 ClientFunction_F = function(const BasePtr: exporttable_s): exporttable_s; cdecl;
 CL_PerformConsistencyCheck = function(const P1: Longint): Longint; cdecl;
 CL_SignonReply = function(const P1: Longint): Longint; cdecl;
 S_StartDynamicSound = procedure(Index: Longint; Channel: LongWord; const Name: PChar; const Origin: vec3_s; Volume, Attenuation: Single; Flags: Byte; Pitch: LongWord); cdecl;
 S_StartStaticSound = procedure(Index: Longint; Channel: LongWord; const Name: PChar; const Origin: vec3_s; Volume, Attenuation: Single; Flags: Byte; Pitch: LongWord); cdecl;
 CL_EventByName = function(const Name: PChar): user_event_s; cdecl;
 CL_ParseCommand = procedure(const Name: PChar; P1: Longint); cdecl;
 CL_ProcessCommands = procedure; cdecl;
 Sys_Error = procedure(const Msg: PChar); cdecl varargs;
 Cmd_AddCommand = procedure(const Name: PChar; const Callback: TCallback; HostType: Longint); cdecl;
 GetAppBuild = function: Longint; cdecl;
 COM_Parse = function(const Data: PChar): Pointer; cdecl;
 COM_Munge = procedure(const Data: Pointer; Length, Sequence: Longint); cdecl;
 COM_UnMunge = procedure(const Data: Pointer; Length, Sequence: Longint); cdecl;
 COM_WriteFile = procedure(const FileName: PChar; const Buffer: Pointer; BufferSize: Longint); cdecl;
 IsValidFile = function(const FileName: PChar): Longint; cdecl;
 CVar_Command = function: Boolean; cdecl;
 SetValueForKey = procedure(const Buffer, Key, Value: PChar; MaxSize: Longint); cdecl;
 R_CheckVariables = procedure(MaxPlayers: Longint); cdecl;
 Voice_RecordStart = function(const UncompressedFile, DecompressedFile, MicInputFile: PChar): Boolean; cdecl;
 Voice_IsRecording = function: Boolean; cdecl;
 Voice_RecordStop = function: Boolean; cdecl;
 Voice_GetCompressedData = function(const Buffer: Pointer; Size: LongWord; Final: LongWord): LongWord; cdecl; 
 CL_SendVoicePacket = procedure(Final: LongWord); cdecl;
 NET_SendPacket = procedure(HostType: Longint; Length: LongWord; const Buffer: Pointer; const Addr: netadr_s); cdecl;
 Sys_ResetKeyState = procedure; cdecl;
 Key_ClearStates = function: Longint; cdecl;
 CL_ParseResourceList = procedure; cdecl;
 CL_StartResourceDownloading = procedure(const StatusText: PChar; Customization: LongWord); cdecl;
 CL_ResourceBatchDownload = procedure; cdecl;
 CL_ResourceDownload = function(const Buffer: sizebuf_s; const ResourceName: PChar): Longint; cdecl;
 COM_ExplainDisconnection = procedure(PrintToConsole: LongWord; const Text: PChar); cdecl varargs;
 CL_ExitGame = procedure; cdecl;
 Host_Error = procedure(const Text: PChar); cdecl varargs;
 CL_CheckForResend = procedure; cdecl;
 CL_SendConnectPacket = procedure; cdecl;
 StopHTTPDownload = procedure; cdecl;
 GameUI_StopProgressBar = procedure; cdecl;

type
 COM_Token = array[1..1024] of Char;

type
 key_bindings_s = ^key_bindings_t;
 key_bindings_t = array[1..256] of PChar;

 key_shift_s = ^key_shift_t;
 key_shift_t = array[1..256] of LongWord;

type
 portable_samplepair_s = ^portable_samplepair_t;
 portable_samplepair_t = record
  Left, Right: Longint;
end;

type
 sfx_s = ^sfx_t;
 sfx_t = record
  Name: array[1..MAX_QPATH] of Char;
  Cache: cache_user_t;
end;

type
 sfxcache_s = ^sfxcache_t;
 sfxcache_t = record
  Length, LoopStart, Speed, Width, Stereo: Longint;
  Data: Byte;
end;

type
 dma_s = ^dma_t;
 dma_t = record
  GameAlive, SoundAlive, SplitBuffer, Channels, Samples, SubmissionChunk,    
  SamplePos, SampleBits, Speed: Longint;
  Buffer: PChar;
end;

type
 channel_s = ^channel_t;
 channel_t = record
  SFX: sfx_s;
  LeftVolume, RightVolume, EndTime, Position, Looping, EntityIndex, EntityChannel: Longint;
  Origin: vec3_t;
  Multiplier: Single;
  MasterVolume: Longint;
end;

type
 wavinfo_s = ^wavinfo_t;
 wavinfo_t = record
  Rate, Width, Channels, LoopStart, Samples, DataOffset: Longint;
end;

type
 S_Init = procedure; cdecl;
 S_Startup = procedure; cdecl;
 S_Shutdown = procedure; cdecl;
 S_StartSound = procedure(Index, Channel: Longint; SFX: sfx_s; Origin: vec3_t; Volume, Attenuation: Single); cdecl;
 S_StopSound = procedure(Index, Channel: Longint); cdecl;
 S_StopAllSounds = procedure(Clear: Longint); cdecl;
 S_ClearBuffer = procedure; cdecl;
 S_Update = procedure(Origin, VForward, VRight, VUp: vec3_t); cdecl;
 S_ExtraUpdate = procedure; cdecl;
 S_PrecacheSound = function(Name: PChar): sfx_s; cdecl;
 S_TouchSound = procedure(Name: PChar); cdecl;
 S_ClearPrecache = procedure; cdecl;
 S_BeginPrecaching = procedure; cdecl;
 S_EndPrecaching = procedure; cdecl;
 S_PaintChannels = procedure(EndTime: Longint); cdecl;
 S_InitPaintChannels = procedure; cdecl;
 SND_PickChannel = function(Index, Channel: Longint): channel_s; cdecl;
 SND_Spatialize = procedure(Channel: channel_s); cdecl;
 SNDDMA_Init = function: Longint; cdecl;
 SNDDMA_GetDMAPos = function: Longint; cdecl;
 SNDDMA_Shutdown = procedure; cdecl;
 S_LocalSound = procedure(Name: PChar); cdecl;
 S_LoadSound = function(Name: sfx_s): sfxcache_s; cdecl;
 GetWAVInfo = function(Name: PChar; WAV: PByte; Length: Longint): wavinfo_t; cdecl;
 SND_InitScaleTable = procedure; cdecl;
 SNDDMA_Submit = procedure; cdecl;
 S_AmbientOff = procedure; cdecl;
 S_AmbientOn = procedure; cdecl;

type
 CBuf_Init = procedure; cdecl;
 CBuf_AddText = procedure(const Text: PChar); cdecl;
 CBuf_InsertText = procedure(const Text: PChar); cdecl;
 CBuf_Execute = procedure; cdecl;

 Cmd_Init = procedure; cdecl;
 Cmd_Exists = function(const Name: PChar): Longint; cdecl;
 Cmd_CompleteCommand = function(const PartialName: PChar; HostType: Longint): PChar; cdecl;
 Cmd_Argc = function: Longint; cdecl;
 Cmd_Argv = function(Index: Longint): PChar; cdecl;
 Cmd_Args = function: PChar; cdecl;
 Cmd_CheckParm = function(const Parameter: PChar): Longint; cdecl;
 Cmd_TokenizeString = procedure(const Text: PChar); cdecl;
 Cmd_ExecuteString = procedure(const Text: PChar; Source: cmd_source_t); cdecl;
 Cmd_ForwardToServer = procedure; cdecl;
 Cmd_Print = procedure(const Text: PChar); cdecl;
 CL_AddConsoleCommand = function(const Name: PChar; const Callback: TCallback): Pointer; cdecl;
 
type
 MSG_ReadByte = function: Longint; cdecl;
 MSG_ReadChar = function: Longint; cdecl;
 MSG_ReadShort = function: Longint; cdecl;
 MSG_ReadLong = function: Longint; cdecl;
 MSG_ReadFloat = function: Single; cdecl;
 MSG_ReadCoord = function: Single; cdecl;
 MSG_ReadAngle16 = function: Single; cdecl;
 MSG_ReadString = function: PChar; cdecl;
 MSG_ReadBits = function(Count: Longint): Longint; cdecl;
 MSG_StartBitReading = procedure(const Buffer: sizebuf_s); cdecl;
 MSG_EndBitReading = procedure(const Buffer: sizebuf_s); cdecl;

 MSG_WriteByte = procedure(const Buffer: sizebuf_s; Value: Byte); cdecl;
 MSG_WriteChar = procedure(const Buffer: sizebuf_s; Value: Char); cdecl;

 MSG_WriteString = procedure(const Buffer: sizebuf_s; const Value: PChar); cdecl;

type
 client_anim_state_s = ^client_anim_state_t;
 client_anim_state_t = record
  Origin, Angles, RealAngles: vec3_t;
  AnimTime, Frame: Single;
  Sequence, GaitSequence: Longint;
  FrameRate: Single;
  SequenceLoops, SequenceFinished: Longint;
  Controller: array[1..4] of Byte;
  Blending: array[1..2] of Byte;
  Vars: latchedvars_t;
end;

type
 TTransformMatrix = array[1..3, 1..4] of Single;
 TTransformArray = array[1..MAXSTUDIOBONES, 1..3, 1..4] of Single;
 TQuaternionArray = array of vec4_t;
 TPositionArray = array of array[1..3] of Single;

type
 PVStudioModelRenderer = ^VStudioModelRenderer;
 VStudioModelRenderer = record
  ClassHandler: function(Dispose: Boolean): Pointer; stdcall;
  Init: procedure; stdcall;
  DrawModel: function(Flags: Longint): Longint; stdcall;
  DrawPlayer: function(Flags: Longint; const Player: entity_state_s): Longint; stdcall;
  GetAnim: function(const SubModel: model_s; const Sequence: mstudioseqdesc_s): mstudioanim_s; stdcall;
  SetupTransform: procedure(TrivialAccept: Longint); stdcall;
  SetupBones: procedure; stdcall;
  CalcAttachments: procedure; stdcall;
  SaveBones: procedure; stdcall;
  MergeBones: procedure(const SubModel: model_s); stdcall;
  EstimateInterpolant: function: Single; stdcall;
  EstimateFrame: function(const Sequence: mstudioseqdesc_s): Single; stdcall;
  FXTransform: procedure(const Entity: cl_entity_s; const Transform: TTransformMatrix); stdcall;
  SlerpBones: procedure(const Quaternion1: TQuaternionArray; const Position1: TPositionArray; const Quaternion2: TQuaternionArray; const Position2: TPositionArray; S: Single); stdcall;
  CalcBoneAdjustment: procedure(DADT: Single; const Adjustment: PSingle; const Controller1, Controller2: PByte; MouthOpen: Byte); stdcall;
  CalcBoneQuaterion: procedure(Frame: Longint; S: Single; const Bone: mstudiobone_s; const Animation: mstudioanim_s; const Adjustment, Quaternion: PSingle); stdcall;
  CalcBonePosition: procedure(Frame: Longint; S: Single; const Bone: mstudiobone_s; const Animation: mstudioanim_s; const Adjustment, Position: PSingle); stdcall;
  CalcRotations: procedure(const Position: TPositionArray; const Quaternion: vec4_s; const Sequence: mstudioseqdesc_s; const Animation: mstudioanim_s; F: Single); stdcall;
  RenderModel: procedure; stdcall;
  RenderFinal: procedure; stdcall;
  RenderFinal_Software: procedure; stdcall;
  RenderFinal_Hardware: procedure; stdcall;
  PlayerBlend: procedure(const Sequence: mstudioseqdesc_s; const Blend: PLongint; const Pitch: PSingle); stdcall;
  EstimateGait: procedure(const Player: entity_state_s); stdcall;
  ProcessGait: procedure(const Player: entity_state_s); stdcall;
  EngineDrawPlayer: function(Flags: Longint; const Player: entity_state_s): Longint; stdcall;
  NormalizeGait: procedure(const Player: entity_state_s); stdcall;
  ProcessBlend: procedure(const Blend: PLongint); stdcall;
end;

type
 DStudioModelRenderer = record
  IsLocal: Longint;
  ClientTime, ClientOldTime: Double;
  DoInterp, GaitEstimation, FrameCount: Longint;
  HiModels, Developer, DrawEntities: cvar_s;
  CurrentEntity: cl_entity_s;
  RenderModel: model_s;
  PlayerInfo: player_info_s;
  PlayerIndex: Longint;
  GaitMovement: Single;
  StudioHeader: studiohdr_s;
  BodyPart: mstudiobodyparts_s;
  SubModel: mstudiomodel_s;
  TopColor, BottomColor: Longint;
  ChromeSprite: model_s;
  CachedBones: Longint;
  CachedBoneNames: array[1..MAXSTUDIOBONES, 1..32] of Char;
  CachedBoneTransform, CachedLightTransform: TTransformArray;
  SoftwareXScale, SoftwareYScale: Single;
  VecUp, VecRight, VecNormal, VecRenderOrigin: vec3_t;
  ModelCount, ModelsDrawn: PLongint;
  RotationMatrix, AliasTransform: ^TTransformMatrix;
  BoneTransform, LightTransform: ^TTransformArray;
end;

type
 PStudioModelRenderer = ^TStudioModelRenderer;
 TStudioModelRenderer = record
  VTable: PVStudioModelRenderer;
  Data: DStudioModelRenderer;
end;

type
 PVBaseEntity = ^VBaseEntity;
 VBaseEntity = record
  Spawn: procedure; stdcall;
  Precache: procedure; stdcall;
  Restart: procedure; stdcall;
  KeyValue: procedure(const Data: KeyValueData_s); stdcall;
  Save: function(const Save: Pointer): Longint; stdcall;
  Restore: function(const Restore: Pointer): Longint; stdcall;
  ObjectCaps: function: Longint; stdcall;
  Activate: procedure; stdcall;
  SetObjectCollisionBox: procedure; stdcall;
  Classify: function: Longint; stdcall;
  DeathNotice: procedure(const Child: entvars_s); stdcall;
  TraceAttack: procedure(const Attacker: entvars_s; Damage: Single; const Direction: vec3_s; const TraceResult: PTraceResult; DamageType: Longint); stdcall;
  TakeDamage: function(const Inflictor, Attacker: entvars_s; Damage: Single; DamageType: Longint): Longint; stdcall;
  TakeHealth: function(Health: Single; DamageType: Longint): Longint; stdcall;
  Killed: procedure(const Attacker: entvars_s; Gib: Longint); stdcall;
  BloodColor: function: Longint; stdcall;
  TraceBleed: procedure(Damage: Single; const Direction: vec3_s; const TraceResult: PTraceResult; DamageType: Longint); stdcall;
  IsTriggered: function(const Activator: Pointer): Longint; stdcall;
  MyMonsterPointer: function: Pointer; stdcall;
  MySquadMonsterPointer: function: Pointer; stdcall;
  GetToggleState: function: Longint; stdcall;
  AddPoints: procedure(Score, AllowNegativeScore: Longint); stdcall;
  AddPointsToTeam: procedure(Score, AllowNegativeScore: Longint); stdcall;
  AddPlayerItem: function(const Item: Pointer): Longint; stdcall;
  RemovePlayerItem: function(const Item: Pointer): Longint; stdcall;
  GiveAmmo: function(Amount: Longint; const Name: PChar; MaxAmmo: Longint): Longint; stdcall;
  GetDelay: function: Single; stdcall;
  IsMoving: function: Longint; stdcall;
  OverrideReset: procedure; stdcall;
  DamageDecal: function(DamageType: Longint): Longint; stdcall;
  SetToggleState: procedure(State: Longint); stdcall;
  StartSneaking: procedure; stdcall;
  StopSneaking: procedure; stdcall;
  OnControls: function(const EntVars: entvars_s): Longint; stdcall;
  IsSneaking: function: Longint; stdcall;
  IsAlive: function: Longint; stdcall;
  IsBSPModel: function: Longint; stdcall;
  ReflectGauss: function: Longint; stdcall;
  HasTarget: function(TargetName: Longint): Longint; stdcall;
  IsInWorld: function: Longint; stdcall;
  IsPlayer: function: Longint; stdcall;
  IsNetClient: function: Longint; stdcall;
  TeamID: function: PChar; stdcall;
  GetNextTarget: function: Pointer; stdcall;
  Think: procedure; stdcall;
  Touch: procedure(const EntOther: Pointer); stdcall;
  Use: procedure(const Activator, Caller: Pointer; UseType: USE_TYPE; Value: Single); stdcall;
  Blocked: procedure(const EntOther: Pointer); stdcall;
  Respawn: function: Pointer; stdcall;
  UpdateOwner: procedure; stdcall;
  FBecomeProne: function: Longint; stdcall;
  Center: function(const Vec: vec3_s): vec3_s; stdcall;
  EyePosition: function(const Vec: vec3_s): vec3_s; stdcall;
  EarPosition: function(const Vec: vec3_s): vec3_s; stdcall;
  BodyTarget: function(const Vec, PositionSource: vec3_s): vec3_s; stdcall;
  Illumination: function: Longint; stdcall;
  FVisible: function(const Entity: Pointer): Longint; stdcall;
  FVecVisible: function(const Origin: vec3_s): Longint; stdcall;
 end;

 PVPointEntity = ^VPointEntity;
 VPointEntity = VBaseEntity;

 PVMultiSource = ^VMultiSource;
 VMultiSource = VPointEntity;

 PVBaseDelay = ^VBaseDelay;
 VBaseDelay = VBaseEntity;

 PVBaseAnimating = ^VBaseAnimating;
 VBaseAnimating = record
  BaseEntity: VBaseEntity;
  HandleAnimEvent: procedure(const Event: MonsterEvent_s); stdcall;
 end;

 PVBaseToggle = ^VBaseToggle;
 VBaseToggle = VBaseAnimating;

 PVBaseButton = ^VBaseButton;
 VBaseButton = VBaseToggle;

 PVWorld = ^VWorld;
 VWorld = VBaseEntity;

 PVBasePlayerItem = ^VBasePlayerItem;
 VBasePlayerItem = record
  BaseAnimating: VBaseAnimating;
  AddToPlayer: function(const Player: Pointer): Longint; stdcall;
  AddDuplicate: function(const Item: Pointer): Longint; stdcall;
  GetItemInfo: function(const ItemInfo: ItemInfo_s): Longint; stdcall;
  CanDeploy: function: Longint; stdcall;
  CanDrop: function: Longint; stdcall;
  Deploy: function: Longint; stdcall;
  IsWeapon: function: Longint; stdcall;
  CanHolster: function: Longint; stdcall;
  Holster: procedure(SkipLocal: Longint); stdcall;
  UpdateItemInfo: procedure; stdcall;
  ItemPreFrame: procedure; stdcall;
  ItemPostFrame: procedure; stdcall;
  Drop: procedure; stdcall;
  Kill: procedure; stdcall;
  AttachToPlayer: procedure(const Player: Pointer); stdcall;
  PrimaryAmmoIndex: function: Longint; stdcall;
  SecondaryAmmoIndex: function: Longint; stdcall;
  UpdateClientData: function(const Player: Pointer): Longint; stdcall;
  GetWeaponPtr: function: Pointer; stdcall;
  GetMaxSpeed: function: Single; stdcall;
  ItemSlot: function: Longint; stdcall;
 end;

 PVBasePlayerWeapon = ^VBasePlayerWeapon;
 VBasePlayerWeapon = record
  BaseItem: VBasePlayerItem;
  ExtractAmmo: function(const Weapon: Pointer): Longint; stdcall;
  ExtractClipAmmo: function(const Weapon: Pointer): Longint; stdcall;
  AddWeapon: function: Longint; stdcall;
  PlayEmptySound: function: Longint; stdcall;
  ResetEmptySound: procedure; stdcall;
  SendWeaponAnim: procedure(Anim, SkipLocal: Longint); stdcall;
  IsUseable: function: Longint; stdcall;
  PrimaryAttack: procedure; stdcall;
  SecondaryAttack: procedure; stdcall;
  Reload: procedure; stdcall;
  WeaponIdle: procedure; stdcall;
  RetireWeapon: procedure; stdcall;
  ShouldWeaponIdle: function: Longint; stdcall;
  UseDecrement: function: Longint; stdcall;
 end;

 PVWeaponBox = ^VWeaponBox;
 VWeaponBox = VBaseEntity;

 PBaseEntity = ^TBaseEntity;
 PBaseDelay = ^TBaseDelay;
 PBaseAnimating = ^TBaseAnimating;
 PBasePlayerItem = ^TBasePlayerItem;
 PBasePlayerWeapon = ^TBasePlayerWeapon;
 PBasePlayer = ^TBasePlayer;

 DBaseEntity = record
  Vars: entvars_s;
  GlobalEnt, LinkEnt: PBaseEntity;
  SaveData: TYPEDESCRIPTION;
  Data: array[1..3] of Longint;
  Ammo_9mm, Ammo_357, Ammo_Bolts, Ammo_BuckShot, Ammo_Rockets, Ammo_Uranium, Ammo_Hornets,
  Ammo_ARGrens, Ammo_338Magnum, Ammo_357SIG, Ammp_45ACP, Ammo_50AE, Ammo_556Nato,
  Ammo_556NatoBox, Ammo_57MM, Ammo_762Nato: Longint;
  StartThrow, ReleaseThrow: Single;
  Swing, ChargeReady, InAttack, Egon_FireState, FireState: Longint;
 end;

 TBaseEntity = record
  VTable: PVBaseEntity;
  Data: DBaseEntity;
 end;

 DBaseDelay = record
  BaseEntity: DBaseEntity;
  Delay: Single;
  KillTarget: Longint;
 end;

 TBaseDelay = record
  VTable: PVBaseDelay;
  Data: DBaseDelay;
 end;

 DBaseAnimating = record
  BaseDelay: DBaseDelay;
  FrameRate, GroundSpeed, LastEventCheck: Single;
  SequenceFinished, SequenceLoops: Longint;
 end;

 TBaseAnimating = record
  VTable: PVBaseAnimating;
  Data: DBaseAnimating;
 end;

 DBasePlayerItem = record
  BaseAnimating: DBaseAnimating;
  Player: PBasePlayer;
  Next: PBasePlayerItem;
  ID: Longint;
 end;

 TBasePlayerItem = record
  VTable: PVBasePlayerItem;
  Data: DBasePlayerItem;
 end;

 DBasePlayerWeapon = record
  BaseItem: DBasePlayerItem;
  PlayEmptySound, FireOnEmpty: Longint;
  NextPrimaryAttack, NextSecondaryAttack, TimeWeaponIdle: Single;
  PrimaryAmmoType, SecondaryAmmoType, Clip, ClientClip, ClientWeaponState, InReload, InSpecialReload, DefaultAmmo, ShellLate: Longint;
  MaxSpeed: Single;
  DelayFire, Direction: Longint;
  UNK2: Longint;
  Accuracy, LastFireTime: Single;
  ShotsFired: Longint;
  UNK4: array[1..3] of Longint;
  ViewModel: Longint;
  Glock18Shoot: Single;
  Glock18ShotsFired: Longint;
  FamasShoot: Single;
  FamasShotsFired, BurstSpread, WeaponState: Longint;
  NextReload, DecreaseShotsFired: Single;
  UNK7: Longint;
  Shell: Longint;
 end;

 TBasePlayerWeapon = record
  VTable: PVBasePlayerWeapon;
  Data: DBasePlayerWeapon;
 end;
 
 DBaseToggle = record
  BaseAnimating: DBaseAnimating;
  ToggleState: TOGGLE_STATE;
  ActivateFinished, MoveDistance, Wait, Lip, TWidth, TLength: Single;
  Position1, Position2, Angle1, Angle2: vec3_t;
  TriggersLeft: Longint;
  Height: Single;
  Activator, Serial: Longint;
  CallWhenMoveDone: procedure; stdcall;
  FinalDest, FinalAngle: vec3_t;
  DamageInflict, Master: Longint;
 end;

 TBaseToggle = record
  VTable: PVBaseToggle;
  Data: DBaseToggle;
 end;

 PVBaseMonster = ^VBaseMonster;
 VBaseMonster = record
  BaseToggle: VBaseToggle;
  ChangeYaw: function: Single; stdcall;
  HasHumanGibs: function: Longint; stdcall;
  HasAlienGibs: function: Longint; stdcall;
  FadeMonster: procedure; stdcall;
  GibMonster: procedure; stdcall;
  GetDeathActivity: function: Activity; stdcall;
  BecomeDead: procedure; stdcall;
  ShouldFadeOnDeath: function: Longint; stdcall;
  Relationship: function(const Target: PBaseEntity): Longint; stdcall;
  PainSound: procedure; stdcall;
  ResetMaxSpeed: procedure; stdcall;
  ReportAIState: procedure; stdcall;
  MonsterInitDead: procedure; stdcall;
  Look: procedure(Distance: Longint); stdcall;
  BestVisibleEnemy: function: PBaseEntity; stdcall;
  FInViewCone: function(const Entity: PBaseEntity): Longint; stdcall;
  FInViewCone_Vec: function(const Origin: vec3_s): Longint; stdcall;
 end;

 DBaseMonster = record
  BaseToggle: DBaseToggle;
  Activity, IdealActivity: Activity;
  LastHitGroup, DamageType: Longint;
  TimeBasedDamage: packed array[1..CDMG_TIMEBASED] of Byte;
  MonsterState, IdealMonsterState: MONSTERSTATE;
  Conditions, Memory: Longint;
  NextAttack: Single;
  Enemy, Enemy_Serial, Target, Target_Serial: Longint;
  FOV: Single;
  BloodColor: Longint;
  HackedGunPos, EnemyOrigin: vec3_t;
 end;

 PBaseMonster = ^TBaseMonster;
 TBaseMonster = record
  VTable: PVBaseMonster;
  Data: DBaseMonster;
 end;

 PVBasePlayer = ^VBasePlayer;
 VBasePlayer = record
  BaseMonster: VBaseMonster;
  Jump: procedure; stdcall;
  Duck: procedure; stdcall;
  PreThink: procedure; stdcall;
  PostThink: procedure; stdcall;
  GetGunPosition: function: vec3_s; stdcall;
  IsBot: function: Longint; stdcall;
  UpdateClientData: procedure; stdcall;
  ImpulseCommands: procedure; stdcall;
  RoundRespawn: procedure; stdcall;
  GetAutoAimVector: function(const Vec: vec3_s): vec3_s; stdcall;
  Blind: procedure(Time, HoldTime, Duration, Alpha: Single); stdcall;
  OnTouchingWeapon: procedure(const WeaponBox: Pointer); stdcall;
 end;

 DBasePlayer = record
  BaseMonster: DBaseMonster;
  RandomSeed: Longint; // 96
  UNK1: Longint; // 97
  ObserverTarget, ObserverTarget_Serial: Longint;
  NextObserverInput: Single;
  SpectatedPlayerWeaponID, SpectatedPlayerHasBomb, SpectatedPlayerHasDefuser, SpecView: Longint;
  UNK2: array[1..2] of Longint; // 105, 106
  KilledByHeadshot: Longint;
  PainShock: Single;
  LastZoom, ResumeZoom: Longint;
  EjectBrass: Single;
  Kevlar, Alive, Team, Money, HasPrimaryWeapon: Longint;
  UNK3, UNK4, UNK5: Longint; // 117, 118, 119
  JustConnected, JoiningState: Longint;
  LastCamera: PBaseEntity;
  NextCameraTime, LastActivity: Single;
  MissionBriefing, InternalModel, TeammateKills, IgnoreMessage, CarriedItems: Longint;
  UNK6: array[1..60] of Longint;
  NextIdleCheckTime, NextRadioCheckTime: Single;
  RadioLeft, PlayerBits: Longint;
  UNK7: array[1..4] of Longint;
  NextHUDTextArgsTime: Single;
  UNK8: array[1..5] of Longint; // 199, 200, 201, 202, 203
  HintMessageHistory, Menu: Longint;
  UNK9: array[1..3] of Longint; // 206, 207, 208
  VIP: Longint;
  UNK10: array[1..6] of Longint; // 210, 211, 212, 213, 214, 215
  TeamKills, HostageKills: Longint;
  UNK11: array[1..14] of Longint;
  BombDefusing: Longint;
  NextMapZoneTime: Single;
  MapZone, ClientMapZone: Longint;
  BombTarget: PBaseEntity; // 236
  PlayerSound, TargetVolume, WeaponVolume, ExtraSoundTimes, WeaponFlash: Longint;
  StopExtraSoundTime, FlashlightTime: Single;
  FlashBattery, ButtonLast, ButtonPressed, ButtonReleased: Longint;
  EntitySoundLast: edict_s; // 248
  SoundRoomType, SoundRange, FallVelocity: Single;
  Items: array[1..MAX_ITEMS] of Longint;
  PhysicsFlags: LongWord; // 257
  NextSuicideTime, TimeStepSound, TimeWeaponIdle, SwimTime, WallJumpTime, SuitUpdate: Single;
  SuitPlayList: array[1..CSUITPLAYLIST] of Longint;
  SuitPlayNext: Longint;
  SuitNoRepeat: array[1..CSUITNOREPEAT] of Longint;
  SuitNoRepeatTime: array[1..CSUITNOREPEAT] of Single;
  LastDamageAmount: Longint;
  DamageTimerPrev, GeigerRange, GeigerDelay: Single;
  GeigerRangePrev, StepLeft: Longint;
  TextureName: array[1..CBTEXTURENAMEMAX] of Char;
  TextureType, DrownDmg, DrownRestored, HUDDamage, InitHUD, GameHUDInitialized, HUDTrain, HUDWeapon, Tank, Tank_Serial: Longint;
  DeadTime: Single;
  NoPlayerSound, LongJump: Longint;
  Sneaking: Single;
  UpdateTime, ClientHealth, ClientBattery, HideHUD, ClientHideHUD, FOV, ClientFOV: Longint;
  NumRespawns, RemoveOnDisconnect: Longint;
  PlayerItems: array[1..MAX_ITEM_TYPES] of PBasePlayerItem;
  ActiveItem, ClientActiveItem, LastItem: PBasePlayerItem;
  Ammo, AmmoLast: array[1..MAX_AMMO_SLOTS] of Longint;
  VecAutoAim: vec3_s;
  OnTarget, Deaths: Longint;
  RespawnFrames: Single;
  PlayerDeaths: Longint;
  UNK12: Longint; // 445
  SBarState: array[1..SBAR_END] of Longint;
  NextSBarUpdateTime, SBarDisappearDelay: Single;
  UNK13: array[1..32] of Longint; // 451..482
  LastX, LastY, CustomSprayFrames: Longint;
  NextDecalTime: Single;
  TeamName: array[1..16] of Char;
  AnimExtention: array[1..32] of Char;
  GaitSequence: Longint; // 500
  UNK14: array[1..2] of Longint;
  OldOrigin, OldAngles: vec3_t;
  AutoWeaponSwitch, VGUIMenus, HasTarget: Longint;
  NextTargetTime, DTMultiplier, FlashedUntil, FlashedAt, FlashHoldTime, FlashDuration: Single;
  FlashAlpha: Longint;
  NextAutoFollowTime: Single;
  AutoBuyData: array[1..256] of Char;
  UNK15: Longint; // 584
  RebuyState: RebuyStruct_t;
  RebuyStructBuilt: Longint; // 595
  UNK16: Longint;
  Location: Longint;
  UNK17: array[1..7] of Longint;
  ProgressBarStartTime, ProgressBarEndTime: Single;
  AutoDirector: Longint; // 607
  UNK18: array[1..4] of Longint;
  NextSayTime, NextSayTeamTime, NextFullUpdateTime, NextVoteTime, NextVoteMapTime, NextListMapsTime, NextListPlayersTime, NextNightVisionTime: Single;
 end;

 TBasePlayer = record
  VTable: PVBasePlayer;
  Data: DBasePlayer;
 end;

type
 GetWeaponClassPtr = function(WeaponIndex: Longint): PBasePlayerWeapon; cdecl;
 HasShield = function: Boolean; cdecl;
 Knife_Swing = function(First: Boolean): Boolean; stdcall;
 Knife_Stab = function(First: Boolean): Boolean; stdcall;
 Knife_TraceLine = procedure(const VecStart, VecEnd: vec3_s; IgnoreMonsters: Longint; const IgnoreEnt: edict_s; const TraceResult: PTraceResult); cdecl;
 Knife_TraceHull = procedure; cdecl;

 COM_DefaultExtension = procedure(FileName: PChar; const Extension: PChar); cdecl;
 SCR_UpdateScreen = procedure; cdecl;
 IsValidCmd = function(const Command: PChar): Boolean; cdecl;
 CL_CheckCommandBounds = procedure(const UserCmd: usercmd_s); cdecl;
 CL_CalculateLerpMSec = function(Time: Single): Longint; cdecl;

 // Half-Life Demo Definitions

const
 MAX_SEGMENTS = 1024;
 MAX_POSSIBLE_MSG = 65536;
 MAX_DEMO_COMMAND = 64;
 DEMOVERSION = 5;
 DEMOPREFIX: array[1..8] of Char = 'HLDEMO' + #$0 + #$0;

 DF_TITLE = $1;
 DF_CDTRACK = $4;
 DF_FADEIN_SLOW = $8;
 DF_FADEIN_FAST = $10;
 DF_FADEOUT_SLOW = $20;
 DF_FADEOUT_FAST = $40;

 MSGID_SERVERMSG = 0;
 MSGID_SERVERMSG2 = 1;
 MSGID_NEXT = 2;
 MSGID_COMMAND = 3;
 MSGID_CLIENTDATA = 4;
 MSGID_LAST = 5;
 MSGID_EVENT = 6;
 MSGID_WEAPONANIM = 7;
 MSGID_SOUND = 8;
 MSGID_READBUFFER = 9;

type
 FileOffset = LongWord;

type
 demomsgheader_s = ^demomsgheader_t;
 demomsgheader_t = packed record
  ID: Byte;
  Time: Single;
  Frame: LongWord;
end;

type
 dm_gameinfo_s = ^dm_gameinfo_t;
 dm_gameinfo_t = record
  Index: Longint;
  RefParams: ref_params_t;
  UserCmd: usercmd_t;
  MoveVars: movevars_t;
  ViewPort: wrect_t;
  IncomingSeq, IncomingAck, IncomingRelAck, OutgoingRelSeq, OutgoingSeq, ReliableSeq, LastReliableSeq: Longint;
  MessageLength: Longint;            
end;

type
 demosegment_s = ^demosegment_t;
 demosegment_t = record
  Index: LongWord;
  Name: array[1..64] of Char;
  Flags: LongWord;
  CDTrack: Longint;
  Time: Single;
  FrameCount: LongWord;
  Data: FileOffset;
  SegmentLength: LongWord;
end;

type
 demosegmentdata_s = ^demosegmentdata_t;
 demosegmentdata_t = record
  SegmentCount: Longint;
  // Segments: array[1..MAX_SEGMENTS] of demosegment_t; // 1..SegmentCount
end;

type                          
 demoheader_s = ^demoheader_t;
 demoheader_t = record
  Prefix: array[1..8] of Char;
  Version, Protocol: Longint;
  Map, GameDir: array[1..260] of Char;
  MapCRC: LongWord;
  SegmentData: FileOffset;
end;

// Half-Life VGUI Implementation

type VGUIMouseCode = (MOUSE_LEFT = 0, MOUSE_RIGHT, MOUSE_MIDDLE, MOUSE_LAST);

type VGUIKeyCode = (KEY_0 = 0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7,
                    KEY_8, KEY_9, KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, 
                    KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, 
                    KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, 
                    KEY_Z, KEY_PAD_0, KEY_PAD_1, KEY_PAD_2, KEY_PAD_3, KEY_PAD_4, 
                    KEY_PAD_5, KEY_PAD_6, KEY_PAD_7, KEY_PAD_8, KEY_PAD_9, KEY_PAD_DIVIDE, 
                    KEY_PAD_MULTIPLY, KEY_PAD_MINUS, KEY_PAD_PLUS, KEY_PAD_ENTER, 
                    KEY_PAD_DECIMAL, KEY_LBRACKET, KEY_RBRACKET, KEY_SEMICOLON, KEY_APOSTROPHE, 
                    KEY_BACKQUOTE, KEY_COMMA, KEY_PERIOD, KEY_SLASH, KEY_BACKSLASH, KEY_MINUS, 
                    KEY_EQUAL, KEY_ENTER, KEY_SPACE, KEY_BACKSPACE, KEY_TAB, KEY_CAPSLOCK, 
                    KEY_NUMLOCK, KEY_ESCAPE, KEY_SCROLLLOCK, KEY_INSERT, KEY_DELETE, KEY_HOME, 
                    KEY_END, KEY_PAGEUP, KEY_PAGEDOWN, KEY_BREAK, KEY_LSHIFT, KEY_RSHIFT, 
                    KEY_LALT, KEY_RALT, KEY_LCONTROL, KEY_RCONTROL, KEY_LWIN, KEY_RWIN, KEY_APP, 
                    KEY_UP, KEY_LEFT, KEY_DOWN, KEY_RIGHT, KEY_F1, KEY_F2, KEY_F3, KEY_F4, 
                    KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_F10, KEY_F11, KEY_F12, KEY_LAST);

type VGUIDefaultCursor = (dc_user, dc_none, dc_arrow, dc_ibeam, dc_hourglass, dc_crosshair, dc_up,
                          dc_sizenwse, dc_sizenesw, dc_sizewe, dc_sizens, dc_sizeall, dc_no, dc_hand, dc_last);

type VGUISchemeColor = (sc_user = 0, sc_black, sc_white, sc_primary1, sc_primary2, sc_primary3, sc_secondary1,
                        sc_secondary2, sc_secondary3, sc_last);

type VGUISchemeFont = (sf_user = 0, sf_primary1, sf_primary2, sf_primary3, sf_secondary1, sf_last);

type VGUISchemeCursor = (scu_user = 0, scu_none, scu_arrow, scu_ibeam, scu_hourglass, scu_crosshair, scu_up,
                         scu_sizenwse, scu_sizenesw, scu_sizewe, scu_sizens, scu_sizeall, scu_no, scu_hand,
                         scu_last);
             
type
 VGUIInputSignal_pv = ^VGUIInputSignal_v;
 VGUIRepaintSignal_pv = ^VGUIRepaintSignal_v;
 VGUIPanel_pv = ^VGUIPanel_v;
 VGUILayout_pv = ^VGUILayout_v;

 VGUIPanel_s = ^VGUIPanel_t;
 VGUIInputSignal_s = ^VGUIInputSignal_t;
 VGUIRepaintSignal_s = ^VGUIRepaintSignal_t;
 VGUILayout_s = ^VGUILayout_t;

 VGUIInputSignal_v = record
  CursorMoved: procedure(X, Y: Longint; const Panel: VGUIPanel_s); stdcall;
  CursorEntered: procedure(const Panel: VGUIPanel_s); stdcall;
  CursorExited: procedure(const Panel: VGUIPanel_s); stdcall;
  MousePressed: procedure(Code: VGUIMouseCode; const Panel: VGUIPanel_s); stdcall;
  MouseDoublePressed: procedure(Code: VGUIMouseCode; const Panel: VGUIPanel_s); stdcall;
  MouseReleased: procedure(Code: VGUIMouseCode; const Panel: VGUIPanel_s); stdcall;
  MouseWheeled: procedure(Delta: Longint; const Panel: VGUIPanel_s); stdcall;
  KeyPressed: procedure(Code: VGUIKeyCode; const Panel: VGUIPanel_s); stdcall;
  KeyTyped: procedure(Code: VGUIKeyCode; const Panel: VGUIPanel_s); stdcall;
  KeyReleased: procedure(Code: VGUIKeyCode; const Panel: VGUIPanel_s); stdcall;
  KeyFocusTicked: procedure(const Panel: VGUIPanel_s); stdcall;
 end;

 VGUIRepaintSignal_v = record
  PanelRepainted: procedure(const Panel: VGUIPanel_s); stdcall;
 end;

 VGUILayout_v = record
  PerformLayout: procedure(const Panel: VGUIPanel_s); stdcall;
 end;
 
 VGUIPanel_v = record
  SetPos: procedure(X, Y: Longint); stdcall;
  GetPos: procedure(const X, Y: PLongint); stdcall;
  SetSize: procedure(Width, Height: Longint); stdcall;
  GetSize: procedure(const Width, Height: PLongint); stdcall;
  SetBounds: procedure(X, Y, Width, Height: Longint); stdcall;
  GetBounds: procedure(const X, Y, Width, Height: PLongint); stdcall;
  GetWidth: function: Longint; stdcall;
  GetHeight: function: Longint; stdcall;
  GetParent: function: VGUIPanel_s; stdcall;
  SetVisible: procedure(State: Boolean); stdcall;
  IsVisible: function: Boolean; stdcall;
  IsVisibleUp: function: Boolean; stdcall;
  Repaint: procedure; stdcall;
  RepaintAll: procedure; stdcall;
  GetAbsExtents: procedure(const X0, Y0, X1, Y1: PLongint); stdcall;
  GetClipRect: procedure(const X0, Y0, X1, Y1: PLongint); stdcall;
  SetParent: procedure(const Parent: VGUIPanel_s); stdcall;
  AddChild: procedure(const Child: VGUIPanel_s); stdcall;
  InsertChildAt: procedure(const Child: VGUIPanel_s; Index: Longint); stdcall;
  RemoveChild: procedure(const Child: VGUIPanel_s); stdcall;
  WasMousePressed: function(Code: VGUIMouseCode): Boolean; stdcall;
  WasMouseDoublePressed: function(Code: VGUIMouseCode): Boolean; stdcall;
  IsMouseDown: function(Code: VGUIMouseCode): Boolean; stdcall;
  WasMouseReleased: function(Code: VGUIMouseCode): Boolean; stdcall;
  WasKeyPressed: function(Code: VGUIKeyCode): Boolean; stdcall;
  IsKeyDown: function(Code: VGUIKeyCode): Boolean; stdcall;
  WasKeyTyped: function(Code: VGUIKeyCode): Boolean; stdcall;
  WasKeyReleased: function(Code: VGUIKeyCode): Boolean; stdcall;
  AddInputSignal: procedure(const Signal: VGUIInputSignal_s); stdcall;
  RemoveInputSignal: procedure(const Signal: VGUIInputSignal_s); stdcall;
  AddRepaintSignal: procedure(const Signal: VGUIRepaintSignal_s); stdcall;
  RemoveRepaintSignal: procedure(const Signal: VGUIRepaintSignal_s); stdcall;
  IsWithin: function(X, Y: Longint): Boolean; stdcall;
  IsWithinTraverse: function(X, Y: Longint): VGUIPanel_s; stdcall;
  LocalToScreen: procedure(const X, Y: PLongint); stdcall;
  ScreenToLocal: procedure(const X, Y: PLongint); stdcall;
  SetCursor: procedure(const Cursor: Pointer); stdcall; // TODO: VGUICursor_s
  SetSchemeCursor: procedure(Cursor: VGUISchemeCursor); stdcall;
  GetCursor: function: Pointer; stdcall; // TODO: VGUICursor_s                                     
  SetMinimumSize: procedure(Width, Height: Longint); stdcall;
  GetMinimumSize: procedure(const Width, Height: PLongint); stdcall;
  RequestFocus: procedure; stdcall;
  HasFocus: function: Boolean; stdcall;
  GetChildCount: function: Longint; stdcall;
  GetChild: function(Index: Longint): VGUIPanel_s; stdcall;
  SetLayout: procedure(const Layout: VGUILayout_s); stdcall;
  InvalidateLayout: procedure(LayoutNow: Boolean); stdcall;
  SetFocusNavGroup: procedure(const FocusNavGroup: Pointer); stdcall; // TODO: VGUIFocusNavGroup_s
  RequestFocusPrev: procedure; stdcall;
  RequestFocusNext: procedure; stdcall;
  AddFocusChangeSignal: procedure(const FocusChangeSignal: Pointer); stdcall; // TODO: VGUIFocusChangeSignal_s
  IsAutoFocusNavEnabled: function: Boolean; stdcall;
  SetAutoFocusNavEnabled: procedure(State: Boolean); stdcall;
  SetBorder: procedure(const Border: Pointer); stdcall;
  SetPaintBorderEnabled: procedure(State: Boolean); stdcall;
  SetPaintBackgroundEnabled: procedure(State: Boolean); stdcall;
  SetPaintEnabled: procedure(State: Boolean); stdcall;
  GetInset: procedure(const Left, Top, Right, Bottom: PLongint); stdcall;
  GetPaintSize: procedure(const Width, Height: PLongint); stdcall;
  SetPreferredSize: procedure(const Width, Height: Longint); stdcall;
  GetPreferredSize: procedure(const Width, Height: PLongint); stdcall;


{244     virtual vgui::SurfaceBase* getSurfaceBase();
        virtual bool   isEnabled();
        virtual void   setEnabled(bool state);
        virtual void   setBuildGroup(vgui::BuildGroup* buildGroup,const char* panelPersistanceName);
        virtual bool   isBuildGroupEnabled();
        virtual void   removeAllChildren();
        virtual void   repaintParent();
        virtual Panel* createPropertyPanel();
        virtual void   getPersistanceText(char* buf,int bufLen);
        virtual void   applyPersistanceText(const char* buf);
        virtual void   setFgColor(vgui::Scheme::SchemeColor sc);
        virtual void   setBgColor(vgui::Scheme::SchemeColor sc);
        virtual void   setFgColor(int r,int g,int b,int a);
        virtual void   setBgColor(int r,int g,int b,int a);
        virtual void   getFgColor(int& r,int& g,int& b,int& a);
        virtual void   getBgColor(int& r,int& g,int& b,int& a);
        virtual void   setBgColor(vgui::Color color);
        virtual void   setFgColor(vgui::Color color);
        virtual void   getBgColor(vgui::Color& color);
        virtual void   getFgColor(vgui::Color& color);
        virtual void   setAsMouseCapture(bool state);
        virtual void   setAsMouseArena(bool state);
        virtual vgui::App*   getApp();
        virtual void   getVirtualSize(int& wide,int& tall);
        virtual void   setLayoutInfo(vgui::LayoutInfo* layoutInfo);
        virtual vgui::LayoutInfo* getLayoutInfo();
        virtual bool   isCursorNone();
public: //bullshit public
        virtual void solveTraverse();
        virtual void paintTraverse();
        virtual void setSurfaceBaseTraverse(vgui::SurfaceBase* surfaceBase);
protected:
        virtual void performLayout();
        virtual void internalPerformLayout();
        virtual void drawSetColor(vgui::Scheme::SchemeColor sc);
        virtual void drawSetColor(int r,int g,int b,int a);
        virtual void drawFilledRect(int x0,int y0,int x1,int y1);
        virtual void drawOutlinedRect(int x0,int y0,int x1,int y1);
        virtual void drawSetTextFont(vgui::Scheme::SchemeFont sf);
        virtual void drawSetTextFont(vgui::Font* font);
        virtual void drawSetTextColor(vgui::Scheme::SchemeColor sc);
        virtual void drawSetTextColor(int r,int g,int b,int a);
        virtual void drawSetTextPos(int x,int y);
        virtual void drawPrintText(const char* str,int strlen);
        virtual void drawPrintText(int x,int y,const char* str,int strlen);
        virtual void drawPrintChar(char ch);
        virtual void drawPrintChar(int x,int y,char ch);
        virtual void drawSetTextureRGBA(int id,const char* rgba,int wide,int tall);
        virtual void drawSetTexture(int id);
        virtual void drawTexturedRect(int x0,int y0,int x1,int y1);
        virtual void solve();
        virtual void paintTraverse(bool repaint);
        virtual void paintBackground();
        virtual void paint();
        virtual void paintBuildOverlay();
        virtual void internalCursorMoved(int x,int y);
        virtual void internalCursorEntered();
        virtual void internalCursorExited();
        virtual void internalMousePressed(vgui::MouseCode code);
        virtual void internalMouseDoublePressed(vgui::MouseCode code);
        virtual void internalMouseReleased(vgui::MouseCode code);
        virtual void internalMouseWheeled(int delta);
        virtual void internalKeyPressed(vgui::KeyCode code);
        virtual void internalKeyTyped(vgui::KeyCode code);
        virtual void internalKeyReleased(vgui::KeyCode code);
        virtual void internalKeyFocusTicked();
        virtual void internalFocusChanged(bool lost);
        virtual void internalSetCursor();          }

end;

 VGUIPanel_t = record
  VTable: VGUIPanel_pv;
  // vars
 end;

 VGUIInputSignal_t = record
  VTable: VGUIInputSignal_pv;
 end;

 VGUIRepaintSignal_t = record
  VTable: VGUIRepaintSignal_pv;
 end;

 VGUILayout_t = record
  VTable: VGUILayout_pv;
 end;

type
 PGameConsole003 = ^TGameConsole003;
 
 PVGameConsole003 = ^VGameConsole003;
 VGameConsole003 = record
  Create: procedure(Dispose: Boolean); stdcall;
  Activate: procedure; stdcall;
  Initialize: procedure; stdcall;
  Hide: procedure; stdcall;
  Clear: procedure; stdcall;
  IsConsoleVisible: function: Boolean; stdcall;
  PrintF: procedure(const Console: PGameConsole003; const Msg: PChar); cdecl varargs;
  DPrintF: procedure(const Console: PGameConsole003; const Msg: PChar); cdecl varargs;
  SetParent: procedure(const Parent: VGUIPanel_s); stdcall;
 end;

 DGameConsole003 = record
  Activated: Boolean;
  Panel: VGUIPanel_s;
 end;

 TGameConsole003 = record
  VTable: PVGameConsole003;
  Data: DGameConsole003;
 end;

type
 PGameUI007 = ^TGameUI007;

 PVGameUI007 = ^VGameUI007;
 VGameUI007 = record
  Create: procedure(Dispose: Boolean); stdcall;
  Init: function(const FactoryList: Pointer; NumFactories: LongWord): Boolean; stdcall;
  Start: procedure(const Engine: cl_enginefuncs_s; InterfaceVersion: LongWord; const AppSystem: Pointer); stdcall;
  Shutdown: procedure; stdcall;
  ActivateGameUI: function: Boolean; stdcall;
  ActivateDemoUI: function: Boolean; stdcall;
  HasExclusiveInput: function: Boolean; stdcall;
  RunFrame: procedure; stdcall;
  ConnectToServer: procedure(const Game: PChar; IP, Port: LongWord); stdcall;
  DisconnectFromServer: procedure; stdcall;
  HideGameUI: procedure; stdcall;
  IsGameUIActive: function: Boolean; stdcall;
  LoadingStarted: procedure(const ResourceType, ResourceName: PChar); stdcall;
  LoadingFinished: procedure(const ResourceType, ResourceName: PChar); stdcall;
  StartProgressBar: procedure(const ProgressType: PChar; NumProgressPoints: LongWord); stdcall;
  ContinueProgressBar: function(const Text: PChar; Point: LongWord): Longint; stdcall;
  StopProgressBar: procedure(Error: Boolean; const FailureReason, ExtendedReason: PChar); stdcall;
  SetProgressBarStatusText: function(const StatusText: PChar): Longint; stdcall;
  ContinueProgressBar2: procedure(Point: Single); stdcall;
  SetProgressBarDescription: procedure(const Description: PChar); stdcall;
 end;

 DGameUI007 = record

 end;

 TGameUI007 = record
  VTable: PVGameUI007;
  Data: DGameUI007;
 end;

implementation

end.
